{"version":3,"sources":["webpack:///./src/docs/md/.gitbook/assets/image29.png","webpack:///./src/docs/md/guides/running-c++-applications-with-totalcross.md","webpack:///./src/docs/md/.gitbook/assets/image39.png"],"names":["module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","require","isMDXComponent"],"mappings":"+EAAAA,EAAOC,QAAU,IAA0B,uD,ybCMpC,IAAMC,EAAe,Q,gPAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,0CADR,4CAGA,iBAAQ,CACN,GAAM,gBADR,gBAGA,qHACA,sBACE,kBAAIC,WAAW,MAAf,UAA+B,mBAAGA,WAAW,MAAS,CAClD,KAAQ,qEADmB,kBAG/B,kBAAIA,WAAW,MAAf,UAA+B,mBAAGA,WAAW,MAAS,CAClD,KAAQ,qEADmB,mBAOjC,4EAIA,iBAAQ,CACN,GAAM,gBADR,gBAGA,8EAIA,iBAAQ,CACN,GAAM,SADR,SAGA,4DACA,qBAAG,sBAAQA,WAAW,KAAnB,WAAH,oCAAmF,0BAAYA,WAAW,KAAvB,cAAnF,yCAAqL,0BAAYA,WAAW,KAAvB,cAArL,KACA,qBAAG,sBAAQA,WAAW,KAAnB,WAAH,qDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iMAgBL,kHAIA,qBAAG,sBAAQA,WAAW,KAAnB,WAAH,+CACA,qBAAG,mBAAKC,IAAI,UAAUC,IAAKC,EAAQ,WACnC,qBAAG,sBAAQH,WAAW,KAAnB,WAAH,WAA0D,0BAAYA,WAAW,KAAvB,UAA1D,cAA2H,0BAAYA,WAAW,KAAvB,cAA3H,+CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,4HAOL,qBAAG,sBAAQA,WAAW,KAAnB,WAAH,4BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,yDAKL,qBAAG,sBAAQA,WAAW,KAAnB,WAAH,kCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,g0BAkBL,qBAAG,sBAAQA,WAAW,KAAnB,WAAH,mEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,yYAiBL,qBAAG,sBAAQA,WAAW,KAAnB,WAAH,QAAuD,0BAAYA,WAAW,KAAvB,uBAAvD,+BAAsJ,0BAAYA,WAAW,KAAvB,eAAtJ,sBACA,qBAAG,sBAAQA,WAAW,KAAnB,WAAH,mEACA,qBAAG,mBAAKC,IAAI,UAAUC,IAAKC,EAAQ,WACnC,qBAAG,sBAAQH,WAAW,KAAnB,YAAH,wBACA,iBAAQ,CACN,GAAM,YADR,YAGA,4FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6hEA+DL,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAf,UAA+B,mBAAGA,WAAW,MAAS,CAClD,KAAQ,qEADmB,kBAG/B,kBAAIA,WAAW,MAAf,UAA+B,mBAAGA,WAAW,MAAS,CAClD,KAAQ,qEADmB,yB,8OAQrCJ,EAAWQ,gBAAiB,G,uBC1N5Bd,EAAOC,QAAU,IAA0B","file":"component---src-docs-md-guides-running-c-applications-with-totalcross-md-2a5d21bd761bc9074992.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/image29-530fc3a0cd8a97a346bc13f4baa2a9db.png\";","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-github-io/totalcross.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"running-c-applications-with-totalcross\"\n    }}>{`Running C++ applications with TotalCross`}</h1>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`We hope you learn how to use TotalCross Runtime and Process implementations. See more about:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Java 7 `}<a parentName=\"li\" {...{\n          \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html\"\n        }}>{`Runtime class`}</a></li>\n      <li parentName=\"ul\">{`Java 8 `}<a parentName=\"li\" {...{\n          \"href\": \"https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html\"\n        }}>{`Process class`}</a></li>\n    </ul>\n    {\n      /* {% hint style=\"warning\" %} */\n    }\n    <p>{`These implementations work only for Linux platforms`}</p>\n    {\n      /* {% endhint %} */\n    }\n    <h2 {...{\n      \"id\": \"requirements\"\n    }}>{`Requirements`}</h2>\n    <p>{`Can compile C ++ applications and finish Get Started:`}</p>\n    {\n      /* {% page-ref page=\"running-c++-applications-with-totalcross.md\" %} */\n    }\n    <h2 {...{\n      \"id\": \"guide\"\n    }}>{`Guide`}</h2>\n    <p>{`Use external codes with Totalcross:`}</p>\n    <p><strong parentName=\"p\">{`Step 1:`}</strong>{` create a blank project based in `}<inlineCode parentName=\"p\">{`HelloWorld`}</inlineCode>{` of VS Code plugin `}{`(`}{`we named it `}<inlineCode parentName=\"p\">{`RunningCpp`}</inlineCode>{`)`}</p>\n    <p><strong parentName=\"p\">{`Step 2:`}</strong>{` create an I/O sample in C++, in our case we did:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`#include <iostream>\n#include <string>\n\nint main()\n{\n    std::string input;\n    std::getline(std::cin, input);\n    std::cout << \"\\\\nI received: \" + input + \"\\\\n\";\n    return 0;\n}\n`}</code></pre>\n    {\n      /* {% hint style=\"info\" %} */\n    }\n    <p>{`It's a simple application to get an I/O input and shortly thereafter return it as output.`}</p>\n    {\n      /* {% endhint %} */\n    }\n    <p><strong parentName=\"p\">{`Step 3:`}</strong>{` compile `}{`(`}{`something like this`}{`)`}{`:`}</p>\n    <p><img alt=\"image29\" src={require(\"../.gitbook/assets/image29.png\")} /></p>\n    <p><strong parentName=\"p\">{`Step 4:`}</strong>{` inside `}<inlineCode parentName=\"p\">{`initUI`}</inlineCode>{` method at `}<inlineCode parentName=\"p\">{`RunningCpp`}</inlineCode>{` class, create a label to show the results:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Label to show the results\nLabel label;\nlabel = new Label();\nlabel.setBackForeColors(Color.WHITE,  Color.BLACK);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Step 5:`}</strong>{` create a child process:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Process initialization\nProcess process = null;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Step 6:`}</strong>{` output to the target program:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Output to program\nbyte[] output = \"Take the output!!!\\\\n\".getBytes();              // convert string to\n                                                                // byte array\ntry {\n    process = Runtime.getRuntime().exec(\"./io\");                // execute your\n                                                                // application (sh like)\n    process.getOutputStream().write(output, 0, output.length);  // write output into\n                                                                // output strem\n    process.waitFor();                                          // blocking method\n                                                                // (wait io finish)\n} catch (IOException ioe) {\n    ioe.printStackTrace();\n} catch (InterruptedException ie) {\n    ie.printStackTrace();\n};\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Step 7:`}</strong>{` read the C++ program output as input to TotalCross application`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Input from program\nString input;\ntry {\n    // Read line by line the buffered stream\n    LineReader lineReader = new LineReader(Stream.asStream(process.getInputStream()));\n    while ((input = lineReader.readLine()) != null) {\n        label.setText(input);\n    }\n} catch (IOException ioe) {\n    ioe.printStackTrace();\n};\n\n// Add label to window\nadd(label, CENTER, CENTER);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Step 8:`}</strong>{` run `}<inlineCode parentName=\"p\">{`TotalCross: Package`}</inlineCode>{` with VS Code plugin or run `}<inlineCode parentName=\"p\">{`mvn package`}</inlineCode>{` in your terminal.`}</p>\n    <p><strong parentName=\"p\">{`Step 9:`}</strong>{` copy C++ binary to target folder `}{`(`}{`something like`}{`)`}{`:`}</p>\n    <p><img alt=\"image39\" src={require(\"../.gitbook/assets/image39.png\")} /></p>\n    <p><strong parentName=\"p\">{`Step 10:`}</strong>{` run your program!!!`}</p>\n    <h2 {...{\n      \"id\": \"see-more\"\n    }}>{`See more`}</h2>\n    <p>{`See our article about how to run RS232 protocol. See the full code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.totalcross;\n\nimport java.io.IOException;\nimport java.lang.Process;\n\nimport totalcross.ui.Label;\nimport totalcross.ui.MainWindow;\nimport totalcross.ui.gfx.Color;\n\nimport totalcross.io.LineReader;\nimport totalcross.io.Stream;\n\nimport totalcross.sys.Settings;\n\npublic class RunningCPP extends MainWindow {\n    public RunningCPP() {\n        setUIStyle(Settings.MATERIAL_UI);\n    }\n\n    @Override\n    public void initUI() {\n        // Label to show the results\n        Label label;\n        label = new Label();\n        label.setBackForeColors(Color.WHITE,  Color.BLACK);\n\n        // Process initialization\n        Process process = null;\n\n        // Output to program\n        byte[] output = \"Take the output!!!\\\\n\".getBytes();              // convert string to\n                                                                        // byte array\n        try {\n            process = Runtime.getRuntime().exec(\"./io\");                // execute your\n                                                                        // application (sh like)\n            process.getOutputStream().write(output, 0, output.length);  // write output into\n                                                                        // output strem\n            process.waitFor();                                          // blocking method\n                                                                        // (wait io finish)\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        } catch (InterruptedException ie) {\n            ie.printStackTrace();\n        };\n\n        // Input from program\n        String input;\n        try {\n            LineReader lineReader = new LineReader(Stream.asStream(process.getInputStream()));\n            while ((input = lineReader.readLine()) != null) {\n                label.setText(input);\n            }\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        };\n\n        // Add label to window\n        add(label, CENTER, CENTER);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Java 7 `}<a parentName=\"li\" {...{\n          \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html\"\n        }}>{`Runtime class`}</a></li>\n      <li parentName=\"ul\">{`Java 8 `}<a parentName=\"li\" {...{\n          \"href\": \"https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html\"\n        }}>{`Process class`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/image39-0fe90e90d10d8b13c17ee7f152c514ab.png\";"],"sourceRoot":""}