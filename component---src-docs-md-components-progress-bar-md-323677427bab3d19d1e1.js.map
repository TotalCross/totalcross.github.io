{"version":3,"sources":["webpack:///./src/docs/md/components/progress-bar.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","style","isMDXComponent"],"mappings":"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","file":"component---src-docs-md-components-progress-bar-md-323677427bab3d19d1e1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-github-io/totalcross.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"progress-bar\"\n    }}>{`Progress Bar`}</h1>\n    <h3 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h3>\n    <p>{`It is a bar that can demonstrate the progress of a particular request or a loading of an event. You can have text that indicates the current status of the ProgressBar and can be used both horizontally and vertically.`}</p>\n    <h3 {...{\n      \"id\": \"source-code\"\n    }}>{`Source code`}</h3>\n    {\n      /* {% code title=\"ProgressBarSample\" %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import totalcross.sys.Convert;\nimport totalcross.sys.Settings;\nimport totalcross.sys.Vm;\nimport totalcross.ui.Container;\nimport totalcross.ui.Control;\nimport totalcross.ui.MainWindow;\nimport totalcross.ui.ProgressBar;\nimport totalcross.ui.dialog.MessageBox;\nimport totalcross.ui.gfx.Color;\nimport totalcross.util.UnitsConverter;\n\npublic class ProgressBarSample extends MainWindow {\n    ProgressBar  pbHYellow, pbVRed, pbVCyan, pbHRed, pbHPurple;\n    int gap = UnitsConverter.toPixels(DP + 8);\n\n    public ProgressBarSample() {\n        setUIStyle(Settings.MATERIAL_UI);\n    }\n\n    @Override\n    public void initUI() {\n        try {\n            super.initUI();\n\n            Container sc = new Container();\n            sc.setInsets(gap, gap, gap, gap);\n            add(sc, LEFT, TOP, FILL, FILL);\n\n            pbHPurple = new ProgressBar();\n            pbHPurple.max = 50;\n            pbHPurple.highlight = true;\n            pbHPurple.suffix = \" of \" + pbHPurple.max;\n            pbHPurple.textColor = 0xAAAA;\n            pbHPurple.drawText = true;\n            sc.add(pbHPurple, LEFT, TOP, FILL, PREFERRED);\n\n            // endless ProgressBarSample\n            pbHYellow = new ProgressBar();\n            pbHYellow.max = width / 4; // max-min = width of the bar\n            pbHYellow.setBackColor(Color.YELLOW);\n            pbHYellow.setForeColor(Color.ORANGE);\n            pbHYellow.prefix = \"Loading, please wait...\";\n            pbHYellow.drawText = true;\n            sc.add(pbHYellow, LEFT, AFTER + gap, FILL, PREFERRED);\n\n            pbHRed = new ProgressBar();\n            pbHRed.max = 50;\n            pbHRed.setEndless();\n            pbHRed.setBackForeColors(Color.DARK, Color.RED);\n            sc.add(pbHRed, LEFT, AFTER + gap, FILL, FONTSIZE + 50);\n\n            final int max = Settings.onJavaSE ? 2000 : 200;\n            // vertical ones\n            pbVCyan = new ProgressBar();\n            pbVCyan.vertical = true;\n            pbVCyan.max = max;\n            pbVCyan.textColor = Color.BLUE;\n            pbVCyan.setBackColor(Color.CYAN);\n            pbVCyan.setForeColor(Color.GREEN);\n            sc.add(pbVCyan, RIGHT, AFTER + gap, PREFERRED, FILL);\n\n            pbVRed = new ProgressBar();\n            pbVRed.vertical = true;\n            pbVRed.max = 50;\n            pbVRed.setBackForeColors(Color.RED, Color.DARK);\n            sc.add(pbVRed, BEFORE - gap, SAME, FONTSIZE + 50, SAME);\n\n            onSwapFinished();\n        } catch (Exception ee) {\n            MessageBox.showException(ee, true);\n        }\n    }\n\n    @Override\n    public void onSwapFinished() {\n        final int ini = Vm.getTimeStamp();\n        repaintNow();\n        // runs the bench test\n        int max = pbVCyan.max;\n        for (int i = max; --i >= 0;) {\n            int v = pbHPurple.getValue();\n            v = (v + 1) % (pbHPurple.max + 1);\n            Control.enableUpdateScreen = false; // since each setValue below updates the screen, we disable it to let it paint all at once at the end\n            pbHPurple.setValue(v);\n            pbVCyan.setValue(i);\n            pbHYellow.setValue(5); // increment value\n            pbHRed.setValue(v);\n            Control.enableUpdateScreen = true;\n            pbVRed.setValue(v);\n            if (Settings.onJavaSE) {\n                Vm.sleep(20);\n            }\n        }\n    }\n}\n`}</code></pre>\n    {\n      /* {% endcode %} */\n    }\n    <h3 {...{\n      \"id\": \"attributes\"\n    }}>{`Attributes`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`int`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`max`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Progress Bar maximum value.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`int`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`value`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Current value of progress Bar.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`String`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`prefix`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`It is the text that appears to the left of the value, remembering that the text output is prefix + value + sufix`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`String`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`suffix`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`It is the text that appears to the right of the value, remembering that the text output is prefix + value + suffix`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`boolean`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`drawText`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`It will indicate if the text will be displayed in progress bar or not, by default it comes as false.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`boolean`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`drawValue`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`It will indicate if the value will be displayed in the progress bar.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h3>\n    <table>\n  <thead>\n    <tr>\n      <th style={{\n            \"textAlign\": \"left\"\n          }}>Type</th>\n      <th style={{\n            \"textAlign\": \"left\"\n          }}>Name</th>\n      <th style={{\n            \"textAlign\": \"left\"\n          }}>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Constructor</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>ProgressBar()</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Instances a ProgressBar with the minimum values 0 and maximum value 100.</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Constructor</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>ProgressBar(int min, int max)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Instances a ProgressBar with the values passed in the variables min and\n        max.</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Void</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>setEndless()</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Use in a horizontal ProgressBar to leave it without end.</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Void</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>setValue(int n)\n        <br />\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Updates the current progressbar value and draws the ProgressBar with the\n        updated state.</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Void</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>setValue(int value, String prefix, String suffix)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>\n        <p>Updates the current value of progressBar and draws it again with the updated\n          state and with texts before the value and after the value.</p>\n        <p></p>\n      </td>\n    </tr>\n  </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`See the `}<a parentName=\"li\" {...{\n          \"href\": \"https://rs.totalcross.com/doc/totalcross/ui/ProgressBar.html\"\n        }}>{`Java Docs`}</a>{` for more information.`}</li>\n      <li parentName=\"ul\">{`You can check the example contained in the SDK, in tc.samples.api.ui ProgressBarSample.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}