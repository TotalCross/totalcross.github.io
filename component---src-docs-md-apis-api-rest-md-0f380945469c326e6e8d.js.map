{"version":3,"sources":["webpack:///./src/docs/md/apis/api-rest.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,8MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,SADR,SAGA,6HACA,yBACE,qBAAOC,WAAW,SAChB,kBAAIA,WAAW,SACb,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,YAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,SAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,YAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,OAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,8BAIF,kBAAIA,WAAW,SACb,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,SAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,2BAIF,kBAAIA,WAAW,SACb,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,OAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,0BAIF,kBAAIA,WAAW,SACb,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,WAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,UAGA,8BAAIA,WAAW,MAAS,CACtB,MAAS,SADX,yBAMN,iBAAQ,CACN,GAAM,gBADR,gBAGA,sEAAqD,sBAAQA,WAAW,KAAnB,iBAArD,oIAIA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,i4DAwDL,0HAIA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,kQAgBL,0EAOA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,gjBA2CL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,yPA0BL,yIACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,65BA2BL,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAf,0DAA+E,6BAAGA,WAAW,MAAS,CAClG,KAAQ,4CADmE,UAA/E,Y,4MAQNJ,EAAWK,gBAAiB","file":"component---src-docs-md-apis-api-rest-md-0f380945469c326e6e8d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-github-io/totalcross.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"api-rest\"\n    }}>{`API Rest`}</h1>\n    <h3 {...{\n      \"id\": \"verbs\"\n    }}>{`Verbs`}</h3>\n    <p>{`HTTP verbs are the request methods we use along with the endpoints to access a particular api route.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Endpoint`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Verbs`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Action`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`/get`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`GET`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Retrieves new information`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`/post`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`POST`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Create new information`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`/put`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`PUT`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Change an information`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`/delete`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`DELETE`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Delete information`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"requisitions\"\n    }}>{`Requisitions`}</h3>\n    <p>{`One of the ways to make requests is to create `}<strong parentName=\"p\">{`PressListener`}</strong>{` for Button, in the example below I will demonstrate how to get the response of the request in a variable and display in a Label`}</p>\n    {\n      /* {% code title=\"PressListener\" %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`//String uri = Requisition URL\n//HttpMethod httpMethod = HTTP Verbs\n    PressListener getPressListener(final String url, String httpType) {\n        return (e) -> {\n            //msg variable will be responsible for storing the request response\n            String msg = \"\";\n\n            try {\n\n                HttpStream.Options options = new HttpStream.Options();\n                options.httpType = httpType;\n\n                HttpStream httpStream = new HttpStream(new URI(url), options);\n                ByteArrayStream bas = new ByteArrayStream(4096);\n                bas.readFully(httpStream, 10, 2048);\n                String data = new String(bas.getBuffer(), 0, bas.available());\n\n                Response<ResponseData> response = new Response<>();\n                response.responseCode = httpStream.responseCode;\n\n                if (httpStream.responseCode == 200){\n                        response.data = (JSONFactory.parse(data, ResponseData.class));\n\n                        //Accessing the answer and picking up the information.\n                        msg += \"Url: \" + response.data.getUrl() + \"\\\\n\";\n                        msg += \"Origin: \" + response.data.getOrigin();\n                }\n            } catch (IOException e1) {\n                    msg = \"erro\";\n            } catch (InstantiationException ex) {\n                ex.printStackTrace();\n            } catch (InvocationTargetException ex) {\n                ex.printStackTrace();\n            } catch (NoSuchMethodException ex) {\n                ex.printStackTrace();\n            } catch (IllegalAccessException ex) {\n                ex.printStackTrace();\n            }\n\n            lblResult.setText(msg);\n            lblResult.setRect(KEEP, KEEP, PREFERRED, PREFERRED);\n\n        };\n    }\n\n    public static class Response<T> {\n        public T data;\n        public int responseCode;\n    }\n\n`}</code></pre>\n    {\n      /* {% endcode %} */\n    }\n    <p>{`Creating the packet to receive the response in order to handle the data obtained from the request`}</p>\n    {\n      /* {% code title=\"Structures\" %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`└── src\n    └── main\n        └── java\n            └── com.your_company_name.your_name_app\n                .\n                .\n                .\n                └── ResponseData\n                    └── Args\n                    └── ResponseData\n`}</code></pre>\n    {\n      /* {% endcode %} */\n    }\n    <p>{`and now create the class to store the information`}</p>\n    {\n      /* {% tabs %} */\n    }\n    {\n      /* {% tab title=\"ResponseData class\" %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.totalcross.RestApi.ResponseData;\n\npublic class ResponseData {\n\n    Args args;\n    String origin;\n    String url;\n\n    public Args getArgs() {\n        return args;\n    }\n\n    public void setArgs(Args args) {\n        this.args = args;\n    }\n\n    public String getOrigin() {\n        return origin;\n    }\n\n    public void setOrigin(String origin) {\n        this.origin = origin;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n}\n\n\n`}</code></pre>\n    {\n      /* {% endtab %} */\n    }\n    {\n      /* {% tab title=\"Args class\" %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.totalcross.RestApi.ResponseData;\n\npublic class Args {\n\n    private String args;\n\n    public String getArgs() {\n        return args;\n    }\n\n    public void setArgs(String args) {\n        this.args = args;\n    }\n\n}\n\n\n`}</code></pre>\n    {\n      /* {% endtab %} */\n    }\n    {\n      /* {% endtabs %} */\n    }\n    <p>{`Now just put that pressListener on your button by changing only the endpoint and the verb, see the example below`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\n    public void initUI() {\n        String binUrl = \"http://httpbin.org\";\n\n        Button btnGet = new Button(\"GET\");\n        btnGet.addPressListener(getPressListener(binUrl + \"/get\", HttpStream.GET));\n        add(btnGet, LEFT, AFTER, FILL, fmH * 3);\n\n        Button btnPost = new Button(\"POST\");\n        btnPost.addPressListener(getPressListener(binUrl + \"/post\", HttpStream.POST));\n        add(btnPost, LEFT, AFTER, FILL, fmH * 3);\n\n        Button btnPut = new Button(\"PUT\");\n        btnPut.addPressListener(getPressListener(binUrl + \"/put\", HttpStream.PUT));\n        add(btnPut, LEFT, AFTER, FILL, fmH * 3);\n\n        Button btnDelete = new Button(\"DELETE\");\n        btnDelete.addPressListener(getPressListener(binUrl + \"/delete\", HttpStream.DELETE));\n        add(btnDelete, LEFT, AFTER, FILL, fmH * 3);\n\n\n        lblResult = new Label(\" \");\n        add(lblResult, LEFT, AFTER);\n    }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`See the complete API code remainder with TotalCross in `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/TotalCross/ApiSample\"\n        }}>{`GitHub`}</a>{`.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}