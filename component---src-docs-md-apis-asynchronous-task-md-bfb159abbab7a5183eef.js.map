{"version":3,"sources":["webpack:///./src/docs/md/apis/asynchronous-task.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,yFACA,iBAAQ,CACN,GAAM,qDADR,qDAGA,oYACA,2VAIA,0DAAyC,6BAAGC,WAAW,KAAQ,CAC3D,KAAQ,yBAD6B,aAAzC,cAMA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0pEA+DL,+FAA8E,kBAAIA,WAAW,KAAf,gBAA9E,oCAA2J,kBAAIA,WAAW,KAAf,kBAA3J,4BAAkO,6BAAGA,WAAW,KAAQ,CACpP,KAAQ,kCACP,0BAAYA,WAAW,KAAvB,gBAFL,sDAEuH,kBAAIA,WAAW,KAAf,YAFvH,oGAGA,6EAA4D,kBAAIA,WAAW,KAAf,iBAA5D,2BAAiI,kBAAIA,WAAW,KAAf,kBAAjI,QAAoL,sBAAQA,WAAW,KAAnB,eAApL,cAAkP,kBAAIA,WAAW,KAAf,qB,qNAKtPJ,EAAWK,gBAAiB","file":"component---src-docs-md-apis-asynchronous-task-md-bfb159abbab7a5183eef.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-github-io/totalcross.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"asynchronous-task\"\n    }}>{`Asynchronous Task`}</h1>\n    <p>{`Executing background tasks in order to not lock the Main Thread.`}</p>\n    <h2 {...{\n      \"id\": \"using-asynctask-class-to-execute-background-tasks\"\n    }}>{`Using AsyncTask class to execute background tasks`}</h2>\n    <p>{`In order to execute task that can take a few seconds to be completely executed, one must run it apart from the main thread, i.e, the thread responsible for painting components. Executing this kind of task in the main thread may cause a non-good user experience, once the application user may be unable to use and see any progress while the task is being executed.`}</p>\n    <p>{`To avoid such an obstacle, TotalCross provides AsyncTask class, which is a helper to execute task in an asynchronous way. By using AsyncTask, the user can easily execute asynchronous task without complex manipulation of threads and, consequently, not locking the main thread. See the example bellow to learn how to use it.`}</p>\n    {\n      /* {% hint style=\"info\" %} */\n    }\n    <p>{`Copy and paste this code inside a `}<a parentName=\"p\" {...{\n        \"href\": \"control/container.md\"\n      }}>{`Container`}</a>{` instance.`}</p>\n    {\n      /* {% endhint %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Button dldButton = new Button(\"download zip\");\nadd(dldButton, CENTER, CENTER);\n\nfinal ProgressBar progressBar = new ProgressBar();\nadd(progressBar, CENTER, AFTER + UnitsConverter.toPixels(DP + 16),\n        PARENTSIZE + 80, PREFERRED);\n\ndldButton.addPressListener((c) -> {\n    new AsyncTask()<Void, Void, Void> {\n        int progress = 0;\n        UpdateListener updateListener = null;\n\n        @Override\n        protected Object doInBackground(Object... objects) {\n            HttpStream.Options o = new HttpStream.Options();\n            o.httpType = HttpStream.GET;\n            final String url = \"<INSERT AN URL TO DOWNLOAD A ZIP FILE>\";\n\n            if(url.startsWith(\"https:\"))\n                o.socketFactory = new SSLSocketFactory();\n\n            try {\n                HttpStream p = new HttpStream(new URI(url));\n                File f = new File(\"file.zip\", File.CREATE_EMPTY);\n                int totalSize = p.contentLength;\n                byte [] buff = new  byte[4096];\n                BufferedStream bs = new BufferedStream(f, BufferedStream.WRITE, 4096);\n                int counter = 0;\n                while(true) {\n                    int size = p.readBytes(buff, 0, buff.length);\n                    counter += size;\n                    progress = (int)((counter/(double)totalSize)*100);\n                    if(size <= 0) break;\n                    bs.writeBytes(buff, 0, size);\n                }\n                progress = 100;\n                bs.close();\n                p.close();\n                f.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return null;\n        }\n\n        @Override\n        protected void onPreExecute() {\n            dldButton.setEnabled(false);\n            MainWindow.getMainWindow().addUpdateListener(updateListener = (elapsed) -> {\n                progressBar.setValue(progress);\n            });\n        }\n\n        @Override\n        protected void onPostExecute(Object result) {\n            dldButton.setEnabled(true);\n            MainWindow.getMainWindow().removeUpdateListener(updateListener);\n        }\n    }.execute();\n});\n`}</code></pre>\n    <p>{`Once method execute is called, before executing the asynchronous task, `}<em parentName=\"p\">{`onPreExecute`}</em>{` method is also called adding an `}<em parentName=\"p\">{`UpdateListener`}</em>{` to update the component `}<a parentName=\"p\" {...{\n        \"href\": \"../components/progress-bar.md\"\n      }}><inlineCode parentName=\"a\">{`ProgressBar`}</inlineCode></a>{` in the adequate time interval trough the variable `}<em parentName=\"p\">{`progress`}</em>{`. The button dldButton is disabled to avoid user execute the same task many times unnecessarily.`}</p>\n    <p>{`When the file is completely downloaded, the function `}<em parentName=\"p\">{`onPostExecute`}</em>{` is called removing the `}<em parentName=\"p\">{`UpdateListener`}</em>{` and `}<strong parentName=\"p\">{`reenabling `}</strong>{`the button `}<em parentName=\"p\">{`dldButton.`}</em></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}