{"version":3,"sources":["webpack:///./src/docs/md/apis/json.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,0MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,QADR,QAGA,iBAAQ,CACN,GAAM,YADR,YAGA,iLACA,iBAAQ,CACN,GAAM,cADR,cAGA,gEACA,iBAAQ,CACN,GAAM,SADR,SAGA,wFACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,oIAKL,wDAAuC,mBAAGA,WAAW,KAAQ,CACzD,KAAQ,iEAD2B,aAGvC,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qHAKL,4EACA,iBAAQ,CACN,GAAM,eADR,eAGA,sBACE,kBAAIA,WAAW,MAAf,gCAAqD,mBAAGA,WAAW,MAAS,CACxE,KAAQ,4CADyC,iB,wMAQ3DJ,EAAWK,gBAAiB","file":"component---src-docs-md-apis-json-md-d138045e26085c0d957e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-github-io/totalcross.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"json\"\n    }}>{`JSON`}</h1>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Json is a way to structure data quickly and with good readability and has a key/data structure very similar to the java hasmap or the python dictionary.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-use\"\n    }}>{`How to use`}</h2>\n    <p>{`the two ways to use JSON in TotalCross:`}</p>\n    <h3 {...{\n      \"id\": \"beans\"\n    }}>{`Beans`}</h3>\n    <p>{`You need to create the data beans that will be received in JSON`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`//Where the data parameter is a variable that contains the JSON\nResponse response = JSONFactory.parse(data, Response.class);\n`}</code></pre>\n    <p>{`You can see more abount this in `}<a parentName=\"p\" {...{\n        \"href\": \"https://app.gitbook.com/@totalcross/s/playbook/apis/api-rest\"\n      }}>{`REST API`}</a></p>\n    <h3 {...{\n      \"id\": \"json-object\"\n    }}>{`JSON Object`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`//Where the data parameter is a variable that contains the JSON\nJSONObject jsonObject = new JSONObject(data);\n`}</code></pre>\n    <p>{`You can use the variable jsonObject like a hashmap.`}</p>\n    <h2 {...{\n      \"id\": \"referencies\"\n    }}>{`Referencies`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`See a project on github using`}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/TotalCross/ApiSample\"\n        }}>{` JSON`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}