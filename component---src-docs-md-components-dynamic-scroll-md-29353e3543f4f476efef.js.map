{"version":3,"sources":["webpack:///./src/docs/md/components/dynamic-scroll.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,0NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,oZAeL,iBAAQ,CACN,GAAM,WADR,WAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SACR,sBAAQA,WAAW,MAAnB,gBACH,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,sCAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,4CAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SACR,sBAAQA,WAAW,MAAnB,gBACH,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,iFAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,uEAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SACR,sBAAQA,WAAW,MAAnB,wCACH,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,qCAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,qCAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SACR,sBAAQA,WAAW,MAAnB,YACH,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,oEAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,uCAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SACR,sBAAQA,WAAW,MAAnB,YACH,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,6DAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,kHAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SACR,sBAAQA,WAAW,MAAnB,SACH,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,mEAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,kDAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SACR,sBAAQA,WAAW,MAAnB,SACH,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,wEAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,uBAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SACR,sBAAQA,WAAW,MAAnB,SACH,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,qBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,sC,wNAUVJ,EAAWK,gBAAiB","file":"component---src-docs-md-components-dynamic-scroll-md-29353e3543f4f476efef.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-github-io/totalcross.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {\n      /* {% code title=\"DynScrollContainerSample.java\" %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Creating and positioning the DynamicScrollContainer\nvsc = new DynamicScrollContainer();\nvsc.setBackColor(Color.WHITE);\nvsc.setBorderStyle(BORDER_SIMPLE);\nadd(vsc, LEFT + gap, AFTER + gap*2, FILL - gap, FILL - gap*2);\n// Adding views to the DynamicScrollContainer\nDynSCTestView view = new DynSCTestView(array[i], font);\nview.height = Settings.screenHeight / 20;\ndatasource.addView(view);\n`}</code></pre>\n    {\n      /* {% endcode %} */\n    }\n    <h3 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`Constructor`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`DynamicScrollContainer`}{`(`}{` `}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Creates a empty DynamicScrollContainer.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`Constructor`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`DynamicScrollContainer`}{`(`}{`DynamicScrollContainer.DataSource datasource`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Creates a DynamicScrollContainer that sets the referred datasource`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`DynamicScrollContainer.AbstractView`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`getTopMostVisibleView`}{`(`}{` `}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Return the top most visible view`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`Boolean`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`isViewVisible`}{`(`}{`DynamicScrollContainer.AbstractView view`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Return true if the view is visible`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`Boolean`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`scrollContent`}{`(`}{`int dx, int dy, boolean fromFlick`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Scroll the DynamicScrollContainer to the referred position. If the boolean is true, it does a flick animation`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`void`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`scrollToView`}{`(`}{`DynamicScrollContainer.AbstractView view`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Scroll the DynamicScrollContainer to the view`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`void`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`setDataSource`}{`(`}{`DynamicScrollContainer.DataSource datasource`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Set the DataSource`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`void`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`stopFlick`}{`(`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Stops any flick animation`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}