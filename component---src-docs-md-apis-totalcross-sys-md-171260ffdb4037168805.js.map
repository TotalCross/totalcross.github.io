{"version":3,"sources":["webpack:///./src/docs/md/apis/totalcross.sys.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","style","isMDXComponent"],"mappings":"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","file":"component---src-docs-md-apis-totalcross-sys-md-171260ffdb4037168805.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-github-io/totalcross.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"totalcrosssys\"\n    }}>{`totalcross.sys`}</h1>\n    <h2 {...{\n      \"id\": \"settings\"\n    }}>{`Settings`}</h2>\n    <p>{`This class provides some preferences from the device configuration and other VM settings. All settings are read-only, unless otherwise specified. Changing their values may cause the VM to crash. Look at its JavaDoc for more details.`}</p>\n    <h2 {...{\n      \"id\": \"vm\"\n    }}><strong parentName=\"h2\">{`VM`}</strong></h2>\n    <p>{`Vm contains various system-level methods. This class contains methods to copy arrays, obtain a timestamp, sleep, and get platform and version information, among many other things. Look at its JavaDoc for more details.`}</p>\n    <h2 {...{\n      \"id\": \"time\"\n    }}>{`Time`}</h2>\n    <p>{`The Time class stores a specific a date and time.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`year`}</strong>{` must have `}<strong parentName=\"li\">{`4 digits`}</strong></li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`hour`}</strong>{` is `}<strong parentName=\"li\">{`numbered in 24-hour notation`}</strong>{`, which is the international standard notation of time, and may also be referred as military time or astronomical time.`}</li>\n    </ul>\n    <p>{`For performance reasons, the Time fields have public access. So you can directly access the field day to get or set its value, instead of calling a method. However, that makes the Time objects unsafe because the fields’ values are not checked when they are set, and may not be within the field valid range.`}</p>\n    <p>{`Since the fields can be set without any kind of validation, it would be pointless to add validation to the other methods, therefore, the Time fields’ values are never validated by any method or constructor. So you must know and always respect the fields’ range, and never set a field with a variable without first checking if the value is withing range `}{`(`}{`for instance, let the user type the hour in an edit and simply convert it to int and set the hour field, without checking if its value is between 0 and 23`}{`)`}{`.`}</p>\n    <p>{`The Time fields with their respective range:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`year:`}</strong>{` The year in 4 digits;`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`month:`}</strong>{` The month in the range of 1 to 12;`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`day:`}</strong>{` The day in the range of 1 to the last day of the specified month;`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`hour:`}</strong>{` The hour in the range of 0 to 23;`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`minute:`}</strong>{` The minute in the range of 0 to 59;`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`second:`}</strong>{` The second in the range of 0 to 59;`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`millis:`}</strong>{` Milliseconds in the range of 0 to 999;`}</li>\n    </ul>\n    <p>{`{% hint style=\"info\" %}\nTime has a constant called `}<strong parentName=\"p\">{`SECONDS_PER_DAY`}</strong>{`, which obviously represents the `}<strong parentName=\"p\">{`number of seconds`}</strong>{` in a day, being equal to 24 `}{`*`}{` 3600.\n{% endhint %}`}</p>\n    <h3 {...{\n      \"id\": \"constructors\"\n    }}>{`Constructors`}</h3>\n    <p>{`Time has six constructors:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Time`}{`(`}{`)`}</strong>{`: Default constructor, creates a Time object set with the device’s current date and time. Most devices do not keep track of the milliseconds, therefore, the field millis of the new object will always have the default value 0 on them.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Time`}{`(`}{`int year, int month, int day, int hour, int minute, int second, int millis`}{`)`}{`:`}</strong>{` Creates a Time object with the given values.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Time`}{`(`}{`long t`}{`)`}{`:`}</strong>{` Creates a Time object from the given value, which must be in the format YYYYMMDDHHMMSS.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Time`}{`(`}{`int yyyymmdd, int hhmmssmmm`}{`)`}{`:`}</strong>{` Constructs a Time object from the given date and time values.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Time`}{`(`}{`String iso8601`}{`)`}{`:`}</strong>{` Creates a Time object using the given string, which must be in the ISO8601 format: YYYYMMDDTHH:MM:SS.`}</li>\n    </ul>\n    <p>{`{% hint style=\"warning\" %}\nPlease notice the last three constructors do not include the milliseconds, so the field millis will keep its default value 0.\n{% endhint %}`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Time`}{`(`}{`String time, boolean hasYear, boolean hasMonth, boolean hasDay, boolean hasHour, boolean hasMinute, boolean hasSeconds`}{`)`}{`:`}</strong>{` Constructs a Time object, parsing the string and placing the fields depending on the flags that were set, using Settings.timeSeparator as spliter. The number of parts must match the number of true flags, or an `}<inlineCode parentName=\"li\">{`ArrayIndexOutOfBoundsException`}</inlineCode>{` will be thrown. AM/PM is supported.`}</li>\n    </ul>\n    <p>{`{% hint style=\"warning\" %}\n`}<strong parentName=\"p\">{`Remember`}</strong>{`: no kind of validation is done on the Time fields values, not even on the constructors. However, the default constructor will never initialize an object with invalid values, and the last two constructors may throw an InvalidNumberException if it fails to parse the given string.\n{% endhint %}`}</p>\n    <h3 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h3>\n    <p>{`Finally, Time has the following methods:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`update()`}</inlineCode></strong>{`: Updates the internal fields with the current timestamp.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`quals(Object o)`}</inlineCode>{`:`}</strong>{` Compares two Time objects for equality. The result is true if and only if the argument is not null and it’s a Time object that represents the same point in time, from year to millisecond, as this object.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`getTimeLong()`}</inlineCode>{`:`}</strong>{` Converts this Time object to a long value in the format YYYYMMDDHHMMSS. Milliseconds is not included.YYYYMMDDHHMMSS. Milliseconds is not included.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`toIso8601()`}</inlineCode></strong>{`: Converts this Time object to a string in the ISO8601 format: YYYYMMDDTHH:MM:SS. Milliseconds is not included.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`toString()`}</inlineCode></strong>{`: Returns the time in format specified in totalcross.sys.Settings `}{`(`}{`does NOT include the date neither the milliseconds`}{`)`}{`. To return the date, use the class totalcross.util.Date. So, to get a string with the date and time, use:`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Time t = new Time();`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`String dateAndTime = new Date(t) + \" \" + t;`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`toString(String timeSeparator)`}</inlineCode></strong>{`: Similar to the above method except that it uses the specified separator.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`dump(StringBuffer sb, String timeSeparator, boolean includeMillis)`}</inlineCode></strong>{` : Dumps the time into the given StringBuffer, using the given separator and including the millileconds if asked by the user.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`isValid()`}</inlineCode></strong>{`: Returns true if the time is valid. Note that the date part is NOT checked; only hour, minute, second, and millis are checked against valid ranges.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`inc(int hours, int minutes, int seconds)`}</inlineCode></strong>{`: Increments or decrements the fields below. Note that this method does NOT update the day/month/year fields. The parameters can be positive `}{`(`}{`to increment`}{`)`}{`, zero `}{`(`}{`to keep it`}{`)`}{`, or negative `}{`(`}{`to decrement`}{`)`}{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"characterconvert\"\n    }}>{`CharacterConvert`}</h2>\n    <p>{`This class is used to correctly handle international character conversions. The default character scheme converter is the 8859-1 `}{`(`}{`ISO Latin 1`}{`)`}{`.`}</p>\n    <p>{`If you want to use a different one, you must extend this class, implementing the `}<inlineCode parentName=\"p\">{`bytes2chars()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`chars2bytes()`}</inlineCode>{` methods, and then assign the public member of `}<inlineCode parentName=\"p\">{`Convert.charConverter`}</inlineCode>{` to use your class instead of this default one. You can also use the method `}<inlineCode parentName=\"p\">{`Convert.setDefaultConverter()`}</inlineCode>{` to change it, passing, as parameter, the prefix of your CharacterConverter class `}{`(`}{`better look at the implementation to know what to pass on`}{`)`}{`.`}</p>\n    <p>{`For example, if you created a class named Iso88592CharacterConverter, call`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Convert.setDefaultConverter(\"Iso88592\");\n`}</code></pre>\n    <p>{`To find out which `}<inlineCode parentName=\"p\">{`sun.io.CharacterEncoder`}</inlineCode>{` you’re using on JDK to implement an equivalent version for TotalCross, use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`System.out.println(\"\" + sun.io.ByteToCharConverter.getDefault());\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"utf8characterconvert\"\n    }}>{`UTF8CharacterConvert`}</h2>\n    <p>{`This class extends the CharacterConvert class, and implements the UTF8 byte to UCS-2 character conversion. To use this class, you can call:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Convert.setDefaultConverter(\"UTF8\");\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"convert\"\n    }}>{`Convert`}</h2>\n    <p>{`Convert basically provides methods that allows object and basic type conversion. Furthermore, it also provides handy methods for common operations that should be used for a better performance.`}</p>\n    <p>{`This class is final and cannot be instantiated – its methods and fields are static.`}</p>\n    <p>{`To give you a better view of this class, its documentation was split into sub-sections:`}</p>\n    <h3 {...{\n      \"id\": \"changing-the-default-character-converter\"\n    }}><strong parentName=\"h3\">{`Changing the default character converter`}</strong></h3>\n    <p>{`The field charConverter keeps a reference to a character converter that will be used by default. You may change it by setting another character converter of your choice.`}</p>\n    <p>{`You may also use the method `}<inlineCode parentName=\"p\">{`setDefaultConverter(String name)`}</inlineCode>{`, which searches for a character converter by its name, and makes it the default by changing the charConverter field. Use like`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Convert.setDefaultConverter(\"UTF8\");\n`}</code></pre>\n    <p>{`to change all bytes_to_char and `}<inlineCode parentName=\"p\">{`char_to_bytes`}</inlineCode>{` operations to use UTF8 instead. Issuing`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Convert.setDefaultConverter(\"\");\n`}</code></pre>\n    <p>{`sets back the default encoder. The method returns true if the given encoder was found; false, otherwise. If not found, the encoder is reseted to the default one `}{`(`}{`ISO 8859-1`}{`)`}{`.`}</p>\n    <h3 {...{\n      \"id\": \"conversion-between-string-and-basic-types\"\n    }}><strong parentName=\"h3\">{`Conversion between String and basic types`}</strong></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"th\">{`Method`}</strong></th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toDouble`}{`(`}{`String s`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Converts the given string to double.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toInt`}{`(`}{`String s`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Converts the given string to int. The number may be prefixed with 0’s.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toShort`}{`(`}{`String s`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Convert a string to the short type. Note that this method is slower than `}{`(`}{`short`}{`)`}{`Convert.toInt`}{`(`}{`)`}{`. However, it will throw an InvalidNumberException if the number is out of the short range.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toLong`}{`(`}{`String s`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Converts the given string to long.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toLong`}{`(`}{`String s, int radix`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Converts the given string to long in the given radix, which must be between 2 and 16.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toString`}{`(`}{`boolean b`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Converts the given boolean to a string.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toString`}{`(`}{`char c`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Converts the given char to a string.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toString`}{`(`}{`double d`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Converts the given double to a string, formatted in scientific notation.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toString`}{`(`}{`double val, int decimalCount`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Converts the given double to a string, formatted with the given number of decimal places.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toString`}{`(`}{`int i`}{`)`}{` Converts`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`the given int to a string.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toString`}{`(`}{`long l`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Converts the given long to a string using base 10.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toString`}{`(`}{`long i, int radix`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Converts the given long to a string in the given radix, which must be between 2 and 16.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toString`}{`(`}{`String doubleValue, int n`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Formats the given string as a double, rounding with n decimal places.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`unsigned2hex`}{`(`}{`int b, int places`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Converts the given unsigned integer to hexadecimal using the given number of places `}{`(`}{`up to 8`}{`)`}{`.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"character-string-and-stringbuffer-utilities\"\n    }}><strong parentName=\"h3\">{`Character, String and StringBuffer utilities`}</strong></h3>\n    <table>\n  <thead>\n    <tr>\n      <th style={{\n            \"textAlign\": \"left\"\n          }}><b>Method</b>\n      </th>\n      <th style={{\n            \"textAlign\": \"left\"\n          }}>Definition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>\n        <p></p>\n        <p>appendPath(String path1, String path2)</p>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Concatenates two strings, ensuring there&#x2019;s a single slash between\n        them. Removes extra slashes or backslashes if necessary.</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>digitOf(char ch, int radix)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Returns the value of the digit stored as char in the specified radix,\n        which must be between 2 and 16. This method only handles the standard ASCII\n        table.</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>dup(char c, int count)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Returns a string filled with the given char and size equals to count.</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>forDigit(int digit, int radix)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Returns the given digit in the specified radix, which must be between\n        2 and 16.</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>getBreakPos(FontMetrics fm,StringBuffer sb,int start, int width,boolean\n        doWordWrap)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Finds the best position to break the line with the given width, respecting\n        word-wrap option and line endings</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>hashCode(StringBuffer sb)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Returns the hash code of the string stored by this StringBuffer.</td>\n    </tr>\n  </tbody>\n    </table>\n    {\n      /* {% hint style=\"warning\" %} */\n    }\n    <p>{`The class StringBuffer does not have a method that returns its hash code, so you would have to first create a String from the StringBuffer to get its hash code, like this:`}</p>\n    <p><inlineCode parentName=\"p\">{`int hashCode = sb.toString.hashCode();`}</inlineCode></p>\n    {\n      /* {% endhint %} */\n    }\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"th\">{`Method`}</strong></th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Convert.hashCode`}{`(`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`calculates the StringBuffer’s hash code directly, without using an intermediary String object, resulting in better performance and memory usage.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`insertAt`}{`(`}{`StringBuffer sb, int pos, char c`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Inserts the given char at the specified position in the StringBuffer.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`insertLineBreak`}{`(`}{`int maxWidth, FontMetrics fm, String text`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Returns a new string which is a copy of the given text with line breaks, placed based on the maxWidth and fm arguments. Very useful method to help you keep your application’s interface cross-platform. It can be used to insert line breaks on strings passed to message boxes or list boxes.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`insertLineBreak`}{`(`}{`int maxWidth, FontMetrics fm, String text`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Returns a new string which is a copy of the given text with line breaks, placed based on the maxWidth and fm arguments. Very useful method to help you keep your application’s interface cross-platform. It can be used to insert line breaks on strings passed to message boxes or list boxes.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`numberOf`}{`(`}{`String s, char c`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Returns the number of occurrences of the specified char in the given string.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`replace`}{`(`}{`String source, String from, String to`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Searches the string source for occurrences of the string from, replacing them by the string to.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`tokenizeString`}{`(`}{`String input, char delim`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Tokenizes the given string using the given char as separator. The return is a string array with size equal to the number of tokens.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`tokenizeString`}{`(`}{`String input, String delim`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Same as the above, but uses a String instead of a char as separator. Never use this method with 1 character length strings, like: `}<inlineCode parentName=\"td\">{`String[] tokens = Convert.tokenizeString(input, “#”);`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Use the previous method instead for better performance`}<strong parentName=\"p\">{`:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`toLowerCase(char c)`}</inlineCode></strong>{`: Converts the given char to lower case.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`toUpperCase(char c)`}</inlineCode></strong>{`: Converts the given char to upper case.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`zeroPad(String s, int size)`}</inlineCode></strong>{`: Pads the string, adding zeros at left.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`zeroUnpad(String s)`}</inlineCode></strong>{`: Removes left zeros of the string.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"arrays\"\n    }}><strong parentName=\"h3\">{`Arrays`}</strong></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`cloneStringArray`}{`(`}{`String`}{`[`}{`]`}{` strs`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Returns a copy of the given string array.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`toStringArray`}{`(`}{`Object`}{`[`}{`]`}{` objs`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Converts the given object array into a string array, by calling toString`}{`(`}{`)`}{` for each object.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`detectSortType`}{`(`}{`Object item`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Returns the sort type for the given item sample `}{`(`}{`which is usually the first item of an array`}{`)`}{`.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Convert provides the quick sort algorithm for array sorting.`}</p>\n    <h3 {...{\n      \"id\": \"constants\"\n    }}>{`Constants`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`SORT_AUTODETECT`}</strong>{` - Chooses between one of the sort types below based on the first element of the array.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`SORT_OBJECT`}</strong>{` - The objects are compared by their string representation.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`SORT_STRING`}</strong>{` - The array contains String objects, and the sort is case sensitive.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`SORT_INT`}</strong>{` - The array contains String objects that represents integer values.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`SORT_DOUBLE`}</strong>{` - The array contains String objects that represents double values.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`SORT_DATE`}</strong>{` - The array contains String objects that represents a Date object with day, month, and year.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`SORT_COMPARABLE`}</strong>{` - The array contains comparable objects `}{`(`}{`objects that implements the `}{`*`}{`*`}{`*`}{`*`}{`Comparable interface`}{`)`}{`.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`SORT_STRING_NOCASE`}</strong>{` - The array contains String objects, and the sort is case insensitive, which is slower than case sensitive sorting.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"methods-1\"\n    }}><strong parentName=\"h3\">{`Methods`}</strong></h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`qsort`}{`(`}{`Object`}{`[`}{`]`}{` items, int first, int last`}{`)`}{` -`}</strong>{` Applies the quick sort algorithm to the elements of the given array, sorting in ascending order and sort type equals to SORT_AUTODETECT.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`qsort`}{`(`}{`Object`}{`[`}{`]`}{` items, int first, int last, int sortType`}{`)`}</strong>{` - Same as the above method, but you can specify the sort type.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`qsort`}{`(`}{`Object`}{`[`}{`]`}{` items, int first, int last, int sortType, boolean ascending`}{`)`}</strong>{` - Same as the above, but you can also choose between sorting in ascending or descending order.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"other-conversions-and-methods\"\n    }}><strong parentName=\"h3\">{`Other Conversions and Methods`}</strong></h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`chars2int`}{`(`}{`String fourChars`}{`)`}</strong>{` - Converts a creator id or type to int.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`int2chars`}{`(`}{`int i`}{`)`}</strong>{` - Converts an int to a creator id or type.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`doubleToIntBits`}{`(`}{`double f`}{`)`}</strong>{` - Converts the given double to its bit representation in IEEE 754 format, using 4 bytes instead of 8 `}{`(`}{`a conversion to float is applied`}{`)`}{`.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`intBitsToDouble`}{`(`}{`int i`}{`)`}</strong>{` - Converts the given IEEE 754 bit representation of a float to a double.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`doubleToLongBits`}{`(`}{`double value`}{`)`}</strong>{` - Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"double format\" bit layout.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`longBitsToDouble`}{`(`}{`long bits`}{`)`}</strong>{` - Converts the given bit representation to a double.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`rol`}{`(`}{`long i, int n, int bits`}{`)`}</strong>{` - Does a rol of n bits in the given long. n must be `}{`<`}{` bits. Unlike the shift left operator `}{`(`}{`<`}{`<`}{`)`}{`, bits that would have been lost are reinserted in order at the right.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ror`}{`(`}{`long i, int n, int bits`}{`)`}</strong>{` - Does a ror of n bits in the given long. n must be `}{`<`}{` bits. Unlike the shift right operator `}{`(`}{`>`}{`>`}{`)`}{`, bits that would have been lost are reinserted in order at the left.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"another-useful-constants\"\n    }}><strong parentName=\"h3\">{`Another Useful Constants`}</strong></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"th\">{`Constants`}</strong></th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}></th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`CRLF`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`\\\\r\\\\n.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`CRLF_BYTES`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`{’\\\\r’,’\\\\n’}`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`MAX_SHORT_VALUE`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The maximum short value: 32767`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`MIN_SHORT_VALUE`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The minimum short value: -32768.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`MIN_INT_VALUE`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The minimum int value: -2147483648`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`MAX_INT_VALUE`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The maximum int value: 2147483647.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`MIN_LONG_VALUE`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The minimum long value: -9223372036854775808.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`MAX_LONG_VALUE`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The maximum long value: 9223372036854775807`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`MAX_DOUBLE_VALUE`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The maximum double value: 9.007199254740992E15.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`MIN_DOUBLE_VALUE`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The minimum double value: 1.1102230246251565E-16.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`MAX_DOUBLE_DIGITS`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The maximum number of digits in a double value, used when formatting to string.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`DOUBLE_POSITIVE_INFINITY_VALUE`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The double that represents a positive infinity.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`DOUBLE_NEGATIVE_INFINITY_VALUE`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The double that represents a negative infinity.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`DOUBLE_POSITIVE_INFINITY_BITS`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The long whose bits represent a positive infinity.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`DOUBLE_NEGATIVE_INFINITY_BITS`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The long whose bits represent a negative infinity.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`DOUBLE_NAN_BITS`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The long whose bits represent a Not a Number `}{`(`}{`NaN`}{`)`}{`.`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}