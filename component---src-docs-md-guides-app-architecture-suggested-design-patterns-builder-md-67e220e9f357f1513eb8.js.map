{"version":3,"sources":["webpack:///./src/docs/md/guides/app-architecture/suggested-design-patterns/builder.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,0PAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,iBAAQ,CACN,GAAM,0BADR,2BAGA,2MACA,iRACA,iBAAQ,CACN,GAAM,4BADR,4BAGA,sJACA,iBAAQ,CACN,GAAM,iBADR,iBAGA,sFAIA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,mOAkBL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,4vCAkDL,iBAAQ,CACN,GAAM,uBADR,uBAGA,0HACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,yGAML,8K,wPAKJJ,EAAWK,gBAAiB","file":"component---src-docs-md-guides-app-architecture-suggested-design-patterns-builder-md-67e220e9f357f1513eb8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-github-io/totalcross.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"template-pattern\"\n    }}>{`Template Pattern`}</h1>\n    <h3 {...{\n      \"id\": \"whats-template-pattern\"\n    }}>{`What's Template Pattern`}</h3>\n    <p>{`In this pattern, we will use an enum that will be responsible for providing a stylization for your controls, thus making your code less coupled and more practical to be developed`}</p>\n    <p>{`For example, in your application has a color pattern, font size and a particular font, you can create an enum that will represent this stylization for you and in case you need to change something in those controls you just need to change that enum.`}</p>\n    <h3 {...{\n      \"id\": \"how-to-apply-this-method\"\n    }}>{`How to apply this method`}</h3>\n    <p>{`For example if in your application you have a need to create custom labels with a specific font and with different font sizes`}</p>\n    <h4 {...{\n      \"id\": \"create-a-enum\"\n    }}>{`Create a enum`}</h4>\n    <p>{`You can create the enum in the root of the controller package`}</p>\n    {\n      /* {% code title=\"Structures \" %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`└── src\n    └── main\n        └── java\n            └── com.your_company_name.your_name_app\n                .\n                .\n                .\n                └── controller\n                    └── Template.java\n`}</code></pre>\n    {\n      /* {% endcode %} */\n    }\n    {\n      /* {% code title=\"Template.java\" %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public enum Template {\n\n/*\n\nH1 to H4 will be used to stylize the controls with a font, bold style,\nfont size and forecolor and will be changed between those enum only your fontsize.\n\nThe parameters of the getFont () method are String font_name,\nboolean boldStyle, int size in example h1 we have then:\n        \"Graviola Soft-Bold\": font\n        false: boldStyle\n        24: Font size\n        0x363D86: forecolor\n*/\n    H1(Font.getFont(\"Graviola Soft-Bold\", false, 24), 0x363D86),\n    H2(Font.getFont(\"Graviola Soft-Bold\", false, 20), 0x363D86),\n    H3(Font.getFont(\"Graviola Soft-Bold\", false, 18), 0x363D86),\n    H4(Font.getFont(\"OpenSans-Bold\", false, 12), 0x363D86),\n\n    private final Font font;\n    private final Integer forecolor;\n\n    Template(Font font, Integer forecolor) {\n        this.font = font;\n        this.forecolor = forecolor;\n    }\n\n    public <T extends Control> T apply(T c) {\n        if (forecolor != null) {\n            c.setForeColor(forecolor);\n        }\n\n        if (font != null) {\n            if (c instanceof Icon) {\n                c.setFont(Font.getFont(c.getFont().name, false, font.size));\n            } else {\n                c.setFont(font);\n            }\n        }\n\n        return c;\n    }\n\n\n`}</code></pre>\n    {\n      /* {% endcode %} */\n    }\n    <h4 {...{\n      \"id\": \"to-use-the-template\"\n    }}>{`To use the template`}</h4>\n    <p>{`In your controls now you can use your previously created template to maintain a standard styling.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Label lblHeader= new Label(\"Header\");\nTemplate.H1.apply(lblHeader);\nadd(lblHeader, CENTER, TOP);\n`}</code></pre>\n    <p>{`The enum template created above is just an example of how to use this pattern, you can customize it according to the needs of your application.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}