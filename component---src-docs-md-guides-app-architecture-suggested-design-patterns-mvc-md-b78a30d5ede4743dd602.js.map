{"version":3,"sources":["webpack:///./src/docs/md/guides/app-architecture/suggested-design-patterns/mvc.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,sPAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,4BADR,4BAGA,8GAA6F,sBAAQC,WAAW,KAAnB,SAA7F,KAA4I,sBAAQA,WAAW,KAAnB,QAA5I,QAA6L,sBAAQA,WAAW,KAAnB,eAC7L,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,UAApB,gDACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,SAApB,4CACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,eAApB,8EAEF,iBAAQ,CACN,GAAM,cADR,cAMA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iSAsBL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,wnBA0CL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,wqDAoEL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,w+BA4CL,iBAAQ,CACN,GAAM,eADR,eAGA,sBACE,kBAAIA,WAAW,MAAf,yBAA8C,mBAAGA,WAAW,MAAS,CACjE,KAAQ,sDADkC,mBAA9C,Y,oPAQNJ,EAAWK,gBAAiB","file":"component---src-docs-md-guides-app-architecture-suggested-design-patterns-mvc-md-b78a30d5ede4743dd602.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-github-io/totalcross.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"mvc-architecture-pattern\"\n    }}>{`MVC Architecture Pattern`}</h1>\n    <p>{`This architecture pattern will assign and separate the objects into responsibilities: `}<strong parentName=\"p\">{`Model`}</strong>{`, `}<strong parentName=\"p\">{`View`}</strong>{` and `}<strong parentName=\"p\">{`Controller`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Model:`}</strong>{` will represent an object, such as a person.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`View:`}</strong>{` The view will represent the model data.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Controller:`}</strong>{` It controls the data of the model object and controls the visualization.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"structures\"\n    }}>{`Structures`}</h3>\n    {\n      /* {% code title=\"Structures\" %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`└── src\n    └── main\n        └── java\n            └── com.your_company_name.your_name_app\n                └── model\n                    └── Person\n                └── view\n                    └── HomeView\n                └── controller\n                    └── HomePresenter\n`}</code></pre>\n    {\n      /* {% endcode %} */\n    }\n    {\n      /* {% tabs %} */\n    }\n    {\n      /* {% tab title=\"Person - Model\" %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.totalcross.mvc.model;\n\npublic class Person {\n    private String name;\n    private String gender;\n\n    public Person(String name, String gender) {\n        this.name = name;\n        this.gender = gender;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n\n    @Override\n    public String toString() {\n        return \"n: \" + name + \" g: \" + gender;\n    }\n}\n\n`}</code></pre>\n    {\n      /* {% endtab %} */\n    }\n    {\n      /* {% tab title=\"HomeScreeen - View\" %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.totalcross.mvc.view;\n\nimport com.totalcross.mvc.controller.HomePresenter;\nimport com.totalcross.mvc.model.Person;\nimport totalcross.ui.Button;\nimport totalcross.ui.Edit;\nimport totalcross.ui.Label;\nimport totalcross.ui.MainWindow;\n\npublic class HomeScreen extends MainWindow {\n\n   //Create a variable to store the interface of the class.\n    Presenter presenter;\n\n    Person person [] = new Person[5];\n    private int gap = 15;\n\n/*\nThe constructor will be responsible for instantiating the HomePresenter class\nwhich will link the presenter of the interface with the controller\n*/\n    public HomeScreen(){\n        new HomePresenter(this);\n    }\n\n    @Override\n    public void initUI() {\n\n        Label lbl = new Label(\"Person\");\n        add(lbl, CENTER, TOP + gap);\n\n        Edit editName = new Edit();\n        editName.caption = \"Insert your name here\";\n        add(editName, LEFT, AFTER + gap);\n\n        Edit editGender = new Edit();\n        editGender.caption = \"Insert your gender here\";\n        add(editGender, LEFT, AFTER + gap);\n\n        Button btn = new Button(\"Create Person\");\n        //Assigning the onCreate method to the btn button\n        btn.addPressListener( e -> presenter.onCreate(person, editName, editGender));\n        add(btn, RIGHT, AFTER + gap);\n    }\n\n    //Creating the interface and the methods that will be used on this screen\n    public interface Presenter{\n        void onCreate(Person[] person, Edit name, Edit gender);\n    }\n\n    //Method that allows you to add the Controller Presenter in the view\n    public void addListener(Presenter presenter) {\n        this.presenter = presenter;\n    }\n\n\n}\n\n\n`}</code></pre>\n    {\n      /* {% endtab %} */\n    }\n    {\n      /* {% tab title=\"HomePresenter  - Controller\" %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.totalcross.mvc.controller;\n\nimport com.totalcross.mvc.model.Person;\nimport com.totalcross.mvc.view.HomeScreen;\nimport totalcross.ui.Edit;\nimport totalcross.ui.Toast;\n\npublic class HomePresenter implements HomeScreen.Presenter {\n/*\n    In the constructor the Presenter link of the controller is realized\n    with the view.\n*/\n    public HomePresenter(HomeScreen home){\n        home.addListener(this);\n    }\n\n    //The method that will be used on the button is implemented.\n    @Override\n    public void onCreate(Person[] person, Edit name, Edit gender) {\n        for (int i = 0; i < person.length; i++) {\n            if (person[i] == null){\n                person[i] = new Person(name.getText(), gender.getText());\n                break;\n            }\n        }\n\n        String persons = \"\";\n        for (Person p: person) {\n            persons += p + \" / \";\n        }\n        Toast.show(persons,2000);\n        System.out.println(persons);\n    }\n}\n\n`}</code></pre>\n    {\n      /* {% endtab %} */\n    }\n    {\n      /* {% endtabs %} */\n    }\n    <h2 {...{\n      \"id\": \"referencies\"\n    }}>{`Referencies`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`See more about MVC in `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.geeksforgeeks.org/mvc-design-pattern/\"\n        }}>{`Geeks for Geeks`}</a>{`.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}