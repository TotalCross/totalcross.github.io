{"version":3,"sources":["webpack:///./src/docs/md/components/sliding-window.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,0NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,iBAAQ,CACN,GAAM,YACL,sBAAQC,WAAW,MAAnB,aACH,qLAIA,iBAAQ,CACN,GAAM,eADR,eAMA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,07BAsCL,2LAA0K,mBAAGA,WAAW,KAAQ,CAC5L,KAAQ,4GAD8J,cAA1K,KAMA,iBAAQ,CACN,GAAM,WADR,WAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SACR,sBAAQA,WAAW,MAAnB,gBACH,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,qEAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,6GAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SACR,sBAAQA,WAAW,MAAnB,gBACH,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,0FAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,kYAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SACR,sBAAQA,WAAW,MAAnB,SACH,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,qBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,yCAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,SACR,sBAAQA,WAAW,MAAnB,SACH,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,qBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,SADX,kD,wNAUVJ,EAAWK,gBAAiB","file":"component---src-docs-md-components-sliding-window-md-51e18248a4ce575166a8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-github-io/totalcross.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"sliding-window\"\n    }}>{`Sliding Window`}</h1>\n    <h3 {...{\n      \"id\": \"overview\"\n    }}><strong parentName=\"h3\">{`Overview`}</strong></h3>\n    <p>{`Sliding Window is a fullscreen window that slides in and out of the screen during pop and unpop events. Use it to create transition effects between screens.`}</p>\n    {\n      /* ![](https://totalcross.com/documentation/img/samples/slidingwindow-sample.gif) */\n    }\n    <h3 {...{\n      \"id\": \"source-code\"\n    }}>{`Source Code`}</h3>\n    {\n      /* {% code title=\"SlidingWindowSample.java\" %} */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic void controlPressed(ControlEvent e) {\n    SlidingWindow sw = new SlidingWindow(new Presenter() {\n        @Override\n        public Container getView() {\n            return new Container() {\n                public void initUI() {\n                    ImageControl i;\n                    try {\n                        i = new ImageControl(new Image(\"images/logoV.png\"));\n                        i.scaleToFit = true;\n                        i.centerImage = true;\n                        add(i, CENTER, CENTER, 100 + DP, 100 + DP);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    } catch (ImageException e) {\n                        e.printStackTrace();\n                    }\n                };\n            };\n        }\n    });\n    sw.popup();\n}\n});\nadd(btn, CENTER, BOTTOM);\n} catch (IOException | ImageException e) {\n    e.printStackTrace();\n}\n`}</code></pre>\n    {\n      /* {% endcode %} */\n    }\n    {\n      /* {% hint style=\"info\" %} */\n    }\n    <p>{`Because it is a more complex example, we only show the specific Sliding Window example code, if you want to see the whole code of the image interface construction `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/TotalCross/TCSample/blob/master/src/main/java/totalcross/sample/components/Home.java\"\n      }}>{`click here`}</a>{`.`}</p>\n    {\n      /* {% endhint %} */\n    }\n    <h3 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`Constructor`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SlidingWindow`}{`(`}{`Presenter`}{`<`}{`Container`}{`>`}{` provider`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Creates a SlidingWindow with the specified provider. Use the provider class to implement your view code.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`Constructor`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`SlidingWindow`}{`(`}{`Presenter`}{`<`}{`Container`}{`>`}{` provider, boolean delayInitUI`}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Creates a SlidingWindow with the specified provider and if it should delay the InitUI execution. Use the delayed InitUI if your screen takes a significant amount of time to load `}{`(`}{`e.g., it fetches data from a server`}{`)`}{` and the non-delayed InitUI if it is fast enough to be loaded prior to the animation. If the delayed option is used, the screen will popup with a spinner.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`void`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`unpop`}{`(`}{` `}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Unpops the SlidingWindow, hiding it.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`void`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`popup`}{`(`}{` `}{`)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Popups the SlidingWindow, showing it.`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}