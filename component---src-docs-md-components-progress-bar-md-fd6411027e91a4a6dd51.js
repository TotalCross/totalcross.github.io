(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{rBiL:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return b})),n.d(t,"default",(function(){return i}));n("91GP"),n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("FlsD"),n("q1tI");var a=n("7ljp"),r=n("hhGP");n("qKvR");function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/md/components/progress-bar.md"}});var o={_frontmatter:b},s=r.a;function i(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(s,l({},o,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"progress-bar"},"Progress Bar"),Object(a.b)("h3",{id:"overview"},"Overview"),Object(a.b)("p",null,"It is a bar that can demonstrate the progress of a particular request or a loading of an event. You can have text that indicates the current status of the ProgressBar and can be used both horizontally and vertically."),Object(a.b)("h3",{id:"source-code"},"Source code"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-java"}),'import totalcross.sys.Convert;\nimport totalcross.sys.Settings;\nimport totalcross.sys.Vm;\nimport totalcross.ui.Container;\nimport totalcross.ui.Control;\nimport totalcross.ui.MainWindow;\nimport totalcross.ui.ProgressBar;\nimport totalcross.ui.dialog.MessageBox;\nimport totalcross.ui.gfx.Color;\nimport totalcross.util.UnitsConverter;\n\npublic class ProgressBarSample extends MainWindow {\n    ProgressBar  pbHYellow, pbVRed, pbVCyan, pbHRed, pbHPurple;\n    int gap = UnitsConverter.toPixels(DP + 8);\n\n    public ProgressBarSample() {\n        setUIStyle(Settings.MATERIAL_UI);\n    }\n\n    @Override\n    public void initUI() {\n        try {\n            super.initUI();\n\n            Container sc = new Container();\n            sc.setInsets(gap, gap, gap, gap);\n            add(sc, LEFT, TOP, FILL, FILL);\n\n            pbHPurple = new ProgressBar();\n            pbHPurple.max = 50;\n            pbHPurple.highlight = true;\n            pbHPurple.suffix = " of " + pbHPurple.max;\n            pbHPurple.textColor = 0xAAAA;\n            pbHPurple.drawText = true;\n            sc.add(pbHPurple, LEFT, TOP, FILL, PREFERRED);\n\n            // endless ProgressBarSample\n            pbHYellow = new ProgressBar();\n            pbHYellow.max = width / 4; // max-min = width of the bar\n            pbHYellow.setBackColor(Color.YELLOW);\n            pbHYellow.setForeColor(Color.ORANGE);\n            pbHYellow.prefix = "Loading, please wait...";\n            pbHYellow.drawText = true;\n            sc.add(pbHYellow, LEFT, AFTER + gap, FILL, PREFERRED);\n\n            pbHRed = new ProgressBar();\n            pbHRed.max = 50;\n            pbHRed.setEndless();\n            pbHRed.setBackForeColors(Color.DARK, Color.RED);\n            sc.add(pbHRed, LEFT, AFTER + gap, FILL, FONTSIZE + 50);\n\n            final int max = Settings.onJavaSE ? 2000 : 200;\n            // vertical ones\n            pbVCyan = new ProgressBar();\n            pbVCyan.vertical = true;\n            pbVCyan.max = max;\n            pbVCyan.textColor = Color.BLUE;\n            pbVCyan.setBackColor(Color.CYAN);\n            pbVCyan.setForeColor(Color.GREEN);\n            sc.add(pbVCyan, RIGHT, AFTER + gap, PREFERRED, FILL);\n\n            pbVRed = new ProgressBar();\n            pbVRed.vertical = true;\n            pbVRed.max = 50;\n            pbVRed.setBackForeColors(Color.RED, Color.DARK);\n            sc.add(pbVRed, BEFORE - gap, SAME, FONTSIZE + 50, SAME);\n\n            onSwapFinished();\n        } catch (Exception ee) {\n            MessageBox.showException(ee, true);\n        }\n    }\n\n    @Override\n    public void onSwapFinished() {\n        final int ini = Vm.getTimeStamp();\n        repaintNow();\n        // runs the bench test\n        int max = pbVCyan.max;\n        for (int i = max; --i >= 0;) {\n            int v = pbHPurple.getValue();\n            v = (v + 1) % (pbHPurple.max + 1);\n            Control.enableUpdateScreen = false; // since each setValue below updates the screen, we disable it to let it paint all at once at the end\n            pbHPurple.setValue(v);\n            pbVCyan.setValue(i);\n            pbHYellow.setValue(5); // increment value\n            pbHRed.setValue(v);\n            Control.enableUpdateScreen = true;\n            pbVRed.setValue(v);\n            if (Settings.onJavaSE) {\n                Vm.sleep(20);\n            }\n        }\n    }\n}\n')),Object(a.b)("h3",{id:"attributes"},"Attributes"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",l({parentName:"tr"},{align:"left"}),"Type"),Object(a.b)("th",l({parentName:"tr"},{align:"left"}),"Name"),Object(a.b)("th",l({parentName:"tr"},{align:"left"}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:"left"}),Object(a.b)("strong",{parentName:"td"},"int")),Object(a.b)("td",l({parentName:"tr"},{align:"left"}),"max"),Object(a.b)("td",l({parentName:"tr"},{align:"left"}),"Progress Bar maximum value.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:"left"}),Object(a.b)("strong",{parentName:"td"},"int")),Object(a.b)("td",l({parentName:"tr"},{align:"left"}),"value"),Object(a.b)("td",l({parentName:"tr"},{align:"left"}),"Current value of progress Bar.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:"left"}),Object(a.b)("strong",{parentName:"td"},"String")),Object(a.b)("td",l({parentName:"tr"},{align:"left"}),"prefix"),Object(a.b)("td",l({parentName:"tr"},{align:"left"}),"It is the text that appears to the left of the value, remembering that the text output is prefix + value + sufix")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:"left"}),Object(a.b)("strong",{parentName:"td"},"String")),Object(a.b)("td",l({parentName:"tr"},{align:"left"}),"suffix"),Object(a.b)("td",l({parentName:"tr"},{align:"left"}),"It is the text that appears to the right of the value, remembering that the text output is prefix + value + suffix")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:"left"}),Object(a.b)("strong",{parentName:"td"},"boolean")),Object(a.b)("td",l({parentName:"tr"},{align:"left"}),"drawText"),Object(a.b)("td",l({parentName:"tr"},{align:"left"}),"It will indicate if the text will be displayed in progress bar or not, by default it comes as false.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:"left"}),Object(a.b)("strong",{parentName:"td"},"boolean")),Object(a.b)("td",l({parentName:"tr"},{align:"left"}),"drawValue"),Object(a.b)("td",l({parentName:"tr"},{align:"left"}),"It will indicate if the value will be displayed in the progress bar.")))),Object(a.b)("h3",{id:"methods"},"Methods"),Object(a.b)("table",null,Object(a.b)("thead",null,Object(a.b)("tr",null,Object(a.b)("th",{style:{textAlign:"left"}},"Type"),Object(a.b)("th",{style:{textAlign:"left"}},"Name"),Object(a.b)("th",{style:{textAlign:"left"}},"Description"))),Object(a.b)("tbody",null,Object(a.b)("tr",null,Object(a.b)("td",{style:{textAlign:"left"}},Object(a.b)("b",null,"Constructor")),Object(a.b)("td",{style:{textAlign:"left"}},"ProgressBar()"),Object(a.b)("td",{style:{textAlign:"left"}},"Instances a ProgressBar with the minimum values 0 and maximum value 100.")),Object(a.b)("tr",null,Object(a.b)("td",{style:{textAlign:"left"}},Object(a.b)("b",null,"Constructor")),Object(a.b)("td",{style:{textAlign:"left"}},"ProgressBar(int min, int max)"),Object(a.b)("td",{style:{textAlign:"left"}},"Instances a ProgressBar with the values passed in the variables min and max.")),Object(a.b)("tr",null,Object(a.b)("td",{style:{textAlign:"left"}},Object(a.b)("b",null,"Void")),Object(a.b)("td",{style:{textAlign:"left"}},"setEndless()"),Object(a.b)("td",{style:{textAlign:"left"}},"Use in a horizontal ProgressBar to leave it without end.")),Object(a.b)("tr",null,Object(a.b)("td",{style:{textAlign:"left"}},Object(a.b)("b",null,"Void")),Object(a.b)("td",{style:{textAlign:"left"}},"setValue(int n)",Object(a.b)("br",null)),Object(a.b)("td",{style:{textAlign:"left"}},"Updates the current progressbar value and draws the ProgressBar with the updated state.")),Object(a.b)("tr",null,Object(a.b)("td",{style:{textAlign:"left"}},Object(a.b)("b",null,"Void")),Object(a.b)("td",{style:{textAlign:"left"}},"setValue(int value, String prefix, String suffix)"),Object(a.b)("td",{style:{textAlign:"left"}},Object(a.b)("p",null,"Updates the current value of progressBar and draws it again with the updated state and with texts before the value and after the value."),Object(a.b)("p",null))))),Object(a.b)("h2",{id:"references"},"References"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"See the ",Object(a.b)("a",l({parentName:"li"},{href:"https://rs.totalcross.com/doc/totalcross/ui/ProgressBar.html"}),"Java Docs")," for more information."),Object(a.b)("li",{parentName:"ul"},"You can check the example contained in the SDK, in tc.samples.api.ui ProgressBarSample.")))}void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/md/components/progress-bar.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-md-components-progress-bar-md-fd6411027e91a4a6dd51.js.map