(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{rBiL:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return s})),a.d(t,"default",(function(){return c}));var n=a("k1TG"),r=a("8o2o"),l=(a("q1tI"),a("7ljp")),b=a("hhGP"),s=(a("qKvR"),{});void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/md/components/progress-bar.md"}});var o={_frontmatter:s},i=b.a;function c(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)(i,Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"progress-bar"},"Progress Bar"),Object(l.b)("h3",{id:"overview"},"Overview"),Object(l.b)("p",null,"It is a bar that can demonstrate the progress of a particular request or a loading of an event. You can have text that indicates the current status of the ProgressBar and can be used both horizontally and vertically."),Object(l.b)("h3",{id:"source-code"},"Source code"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'import totalcross.sys.Convert;\nimport totalcross.sys.Settings;\nimport totalcross.sys.Vm;\nimport totalcross.ui.Container;\nimport totalcross.ui.Control;\nimport totalcross.ui.MainWindow;\nimport totalcross.ui.ProgressBar;\nimport totalcross.ui.dialog.MessageBox;\nimport totalcross.ui.gfx.Color;\nimport totalcross.util.UnitsConverter;\n\npublic class ProgressBarSample extends MainWindow {\n    ProgressBar  pbHYellow, pbVRed, pbVCyan, pbHRed, pbHPurple;\n    int gap = UnitsConverter.toPixels(DP + 8);\n\n    public ProgressBarSample() {\n        setUIStyle(Settings.MATERIAL_UI);\n    }\n\n    @Override\n    public void initUI() {\n        try {\n            super.initUI();\n\n            Container sc = new Container();\n            sc.setInsets(gap, gap, gap, gap);\n            add(sc, LEFT, TOP, FILL, FILL);\n\n            pbHPurple = new ProgressBar();\n            pbHPurple.max = 50;\n            pbHPurple.highlight = true;\n            pbHPurple.suffix = " of " + pbHPurple.max;\n            pbHPurple.textColor = 0xAAAA;\n            pbHPurple.drawText = true;\n            sc.add(pbHPurple, LEFT, TOP, FILL, PREFERRED);\n\n            // endless ProgressBarSample\n            pbHYellow = new ProgressBar();\n            pbHYellow.max = width / 4; // max-min = width of the bar\n            pbHYellow.setBackColor(Color.YELLOW);\n            pbHYellow.setForeColor(Color.ORANGE);\n            pbHYellow.prefix = "Loading, please wait...";\n            pbHYellow.drawText = true;\n            sc.add(pbHYellow, LEFT, AFTER + gap, FILL, PREFERRED);\n\n            pbHRed = new ProgressBar();\n            pbHRed.max = 50;\n            pbHRed.setEndless();\n            pbHRed.setBackForeColors(Color.DARK, Color.RED);\n            sc.add(pbHRed, LEFT, AFTER + gap, FILL, FONTSIZE + 50);\n\n            final int max = Settings.onJavaSE ? 2000 : 200;\n            // vertical ones\n            pbVCyan = new ProgressBar();\n            pbVCyan.vertical = true;\n            pbVCyan.max = max;\n            pbVCyan.textColor = Color.BLUE;\n            pbVCyan.setBackColor(Color.CYAN);\n            pbVCyan.setForeColor(Color.GREEN);\n            sc.add(pbVCyan, RIGHT, AFTER + gap, PREFERRED, FILL);\n\n            pbVRed = new ProgressBar();\n            pbVRed.vertical = true;\n            pbVRed.max = 50;\n            pbVRed.setBackForeColors(Color.RED, Color.DARK);\n            sc.add(pbVRed, BEFORE - gap, SAME, FONTSIZE + 50, SAME);\n\n            onSwapFinished();\n        } catch (Exception ee) {\n            MessageBox.showException(ee, true);\n        }\n    }\n\n    @Override\n    public void onSwapFinished() {\n        final int ini = Vm.getTimeStamp();\n        repaintNow();\n        // runs the bench test\n        int max = pbVCyan.max;\n        for (int i = max; --i >= 0;) {\n            int v = pbHPurple.getValue();\n            v = (v + 1) % (pbHPurple.max + 1);\n            Control.enableUpdateScreen = false; // since each setValue below updates the screen, we disable it to let it paint all at once at the end\n            pbHPurple.setValue(v);\n            pbVCyan.setValue(i);\n            pbHYellow.setValue(5); // increment value\n            pbHRed.setValue(v);\n            Control.enableUpdateScreen = true;\n            pbVRed.setValue(v);\n            if (Settings.onJavaSE) {\n                Vm.sleep(20);\n            }\n        }\n    }\n}\n')),Object(l.b)("h3",{id:"attributes"},"Attributes"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.b)("strong",{parentName:"td"},"int")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"max"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Progress Bar maximum value.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.b)("strong",{parentName:"td"},"int")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"value"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Current value of progress Bar.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.b)("strong",{parentName:"td"},"String")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"prefix"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"It is the text that appears to the left of the value, remembering that the text output is prefix + value + sufix")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.b)("strong",{parentName:"td"},"String")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"suffix"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"It is the text that appears to the right of the value, remembering that the text output is prefix + value + suffix")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.b)("strong",{parentName:"td"},"boolean")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"drawText"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"It will indicate if the text will be displayed in progress bar or not, by default it comes as false.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.b)("strong",{parentName:"td"},"boolean")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"drawValue"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"It will indicate if the value will be displayed in the progress bar.")))),Object(l.b)("h3",{id:"methods"},"Methods"),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",null,Object(l.b)("th",{style:{textAlign:"left"}},"Type"),Object(l.b)("th",{style:{textAlign:"left"}},"Name"),Object(l.b)("th",{style:{textAlign:"left"}},"Description"))),Object(l.b)("tbody",null,Object(l.b)("tr",null,Object(l.b)("td",{style:{textAlign:"left"}},Object(l.b)("b",null,"Constructor")),Object(l.b)("td",{style:{textAlign:"left"}},"ProgressBar()"),Object(l.b)("td",{style:{textAlign:"left"}},"Instances a ProgressBar with the minimum values 0 and maximum value 100.")),Object(l.b)("tr",null,Object(l.b)("td",{style:{textAlign:"left"}},Object(l.b)("b",null,"Constructor")),Object(l.b)("td",{style:{textAlign:"left"}},"ProgressBar(int min, int max)"),Object(l.b)("td",{style:{textAlign:"left"}},"Instances a ProgressBar with the values passed in the variables min and max.")),Object(l.b)("tr",null,Object(l.b)("td",{style:{textAlign:"left"}},Object(l.b)("b",null,"Void")),Object(l.b)("td",{style:{textAlign:"left"}},"setEndless()"),Object(l.b)("td",{style:{textAlign:"left"}},"Use in a horizontal ProgressBar to leave it without end.")),Object(l.b)("tr",null,Object(l.b)("td",{style:{textAlign:"left"}},Object(l.b)("b",null,"Void")),Object(l.b)("td",{style:{textAlign:"left"}},"setValue(int n)",Object(l.b)("br",null)),Object(l.b)("td",{style:{textAlign:"left"}},"Updates the current progressbar value and draws the ProgressBar with the updated state.")),Object(l.b)("tr",null,Object(l.b)("td",{style:{textAlign:"left"}},Object(l.b)("b",null,"Void")),Object(l.b)("td",{style:{textAlign:"left"}},"setValue(int value, String prefix, String suffix)"),Object(l.b)("td",{style:{textAlign:"left"}},Object(l.b)("p",null,"Updates the current value of progressBar and draws it again with the updated state and with texts before the value and after the value."),Object(l.b)("p",null))))),Object(l.b)("h2",{id:"references"},"References"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"See the ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://rs.totalcross.com/doc/totalcross/ui/ProgressBar.html"}),"Java Docs")," for more information."),Object(l.b)("li",{parentName:"ul"},"You can check the example contained in the SDK, in tc.samples.api.ui ProgressBarSample.")))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/md/components/progress-bar.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-md-components-progress-bar-md-323677427bab3d19d1e1.js.map