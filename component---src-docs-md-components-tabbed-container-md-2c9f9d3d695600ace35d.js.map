{"version":3,"sources":["webpack:///./src/docs/md/components/tabbed-container.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","style","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,4NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,iBAAQ,CACN,GAAM,YADR,YAGA,gOACA,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,m6JA8HL,iBAAQ,CACN,GAAM,WADR,WAGA,yBACF,yBACE,sBACE,kBAAIC,MAAO,CACL,UAAa,SADnB,QAGA,kBAAIA,MAAO,CACL,UAAa,SADnB,QAGA,kBAAIA,MAAO,CACL,UAAa,SADnB,eAKJ,yBACE,sBACE,kBAAIA,MAAO,CACL,UAAa,SACZ,mCAEP,kBAAIA,MAAO,CACL,UAAa,SADnB,yCAGA,kBAAIA,MAAO,CACL,UAAa,SADnB,mDAIF,sBACE,kBAAIA,MAAO,CACL,UAAa,SACZ,mCAEP,kBAAIA,MAAO,CACL,UAAa,SADnB,8DAGA,kBAAIA,MAAO,CACL,UAAa,SADnB,gEAIF,sBACE,kBAAIA,MAAO,CACL,UAAa,SACZ,mCAEP,kBAAIA,MAAO,CACL,UAAa,SADnB,wCAGA,kBAAIA,MAAO,CACL,UAAa,SADnB,+CAIF,sBACE,kBAAIA,MAAO,CACL,UAAa,SACZ,mCAEP,kBAAIA,MAAO,CACL,UAAa,SADnB,uBAGA,kBAAIA,MAAO,CACL,UAAa,SADnB,kCAIF,sBACE,kBAAIA,MAAO,CACL,UAAa,SACZ,8BAEP,kBAAIA,MAAO,CACL,UAAa,SADnB,sBAGA,kBAAIA,MAAO,CACL,UAAa,SAEjB,uDACA,yEAKJ,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAID,WAAW,MAAf,oBAAyC,mBAAGA,WAAW,MAAS,CAC5D,KAAQ,gIAD6B,UAAzC,MAGA,kBAAIA,WAAW,MAAf,WAAgC,mBAAGA,WAAW,MAAS,CACnD,KAAQ,0DADoB,aAAhC,iC,0NAQNJ,EAAWM,gBAAiB","file":"component---src-docs-md-components-tabbed-container-md-2c9f9d3d695600ace35d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-github-io/totalcross.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tabbed-container\"\n    }}>{`Tabbed Container`}</h1>\n    <h3 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h3>\n    <p>{`Tabbed Container is a control that has tabs that can have text and / or images. It has an automatic scrool, that is, by clicking on a specific tab, the controler simulates the drag to the chosen tab.`}</p>\n    <h3 {...{\n      \"id\": \"source-code\"\n    }}>{`Source Code`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import totalcross.io.IOException;\nimport totalcross.sample.util.Colors;\nimport totalcross.sys.Settings;\nimport totalcross.ui.Container;\nimport totalcross.ui.Label;\nimport totalcross.ui.ScrollContainer;\nimport totalcross.ui.TabbedContainer;\nimport totalcross.ui.dialog.MessageBox;\nimport totalcross.ui.gfx.Color;\nimport totalcross.ui.image.Image;\nimport totalcross.ui.image.ImageException;\n\npublic class TabbedContainerSample extends ScrollContainer {\n    private final int gap = (int)(Settings.screenDensity * 30);\n\n    @Override\n    public void initUI() {\n        try {\n            setBackForeColors(Colors.BACKGROUND, Colors.ON_BACKGROUND);\n\n            CreateImageAndTextTabbedContainer();\n            CreateTextOnlyTabbedContainer();\n            CreateBulletsTabbedContainer();\n        } catch (Exception ee) {\n            MessageBox.showException(ee, true);\n        }\n    }\n\n    private void CreateImageAndTextTabbedContainer() throws ImageException, IOException {\n        String[] caps = {\n            \"Social 1\",\n            \"Social 2\",\n            \"Social 3\"\n        };\n        Image[] icons = {\n            new Image(\"images/fb_icon_40.png\"),\n            new Image(\"images/gmail_icon_40.png\"),\n            new Image(\"images/insta_icon_40.png\")\n        };\n\n        Label sampleTitle = new Label(\"This is a icon and text Tabbed Container\", CENTER);\n        sampleTitle.autoSplit = true;\n        add(sampleTitle, LEFT + gap, TOP + gap, FILL - gap, PREFERRED);\n\n        Container spacing = new Container();\n        add(spacing, LEFT + gap*2, AFTER + gap/2, FILL - gap*2, (int) (Settings.screenHeight * 0.3));\n\n        final TabbedContainer tc = new TabbedContainer(caps);\n        tc.setBackColor(Color.DARK);\n        tc.getContainer(0).setBackColor(Colors.P_300);\n        tc.getContainer(1).setBackColor(Colors.P_400);\n        tc.getContainer(2).setBackColor(Colors.P_500);\n        tc.setIcons(icons);\n        tc.pressedColor = Colors.P_800;\n        tc.activeTabBackColor = Colors.P_800;\n        tc.allSameWidth = true;\n        tc.extraTabHeight = fmH * 2;\n        spacing.add(tc, LEFT, TOP, FILL, PARENTSIZE);\n        for(int i = 0; i < 3; i++)\n            tc.getContainer(i).add(new Label(\"Container \" + (i+1)), CENTER, CENTER);\n    }\n\n    private void CreateTextOnlyTabbedContainer() throws ImageException, IOException {\n        String[] caps = new String[3];\n        caps[0] = \"Home\";\n        caps[1] = \"Photos\";\n        caps[2] = \"Profile\";\n\n\n        Label sampleTitle = new Label(\"This is a text only Tabbed Container\", CENTER);\n        sampleTitle.autoSplit = true;\n        add(sampleTitle, LEFT + gap, AFTER + gap*2, FILL - gap, PREFERRED);\n\n        Container spacing = new Container();\n        add(spacing, LEFT + gap*2, AFTER + gap/2, FILL - gap*2, (int) (Settings.screenHeight * 0.3));\n\n        final TabbedContainer tc = new TabbedContainer(caps);\n        tc.setType(TabbedContainer.TABS_BOTTOM);\n        tc.setBackColor(Color.DARK);\n        tc.getContainer(0).setBackColor(Colors.P_300);\n        tc.getContainer(1).setBackColor(Colors.P_400);\n        tc.getContainer(2).setBackColor(Colors.P_500);\n        tc.useOnTabTheContainerColor = true;\n        tc.allSameWidth = true;\n        tc.extraTabHeight = fmH / 2;\n        spacing.add(tc, LEFT, TOP, FILL, PARENTSIZE);\n        for(int i = 0; i < 3; i++)\n            tc.getContainer(i).add(new Label(\"Container \" + (i+1)), CENTER, CENTER);\n    }\n\n    private void CreateBulletsTabbedContainer() throws ImageException, IOException {\n        Image[] images = new Image[3];\n        Image empty = new Image(\"images/bullet_empty.png\").getSmoothScaledInstance(fmH, fmH);\n        Image filled = new Image(\"images/bullet_full.png\").getSmoothScaledInstance(fmH, fmH);\n        filled.applyColor2(Color.ORANGE);\n\n        for (int i = images.length; --i >= 0;) {\n            images[i] = empty;\n        }\n\n        Label sampleTitle = new Label(\"This is a image-only Tabbed Container\", CENTER);\n        sampleTitle.autoSplit = true;\n        add(sampleTitle, LEFT + gap, AFTER + gap*2, FILL - gap, PREFERRED);\n\n        Container spacing = new Container();\n        add(spacing, LEFT + gap*2, AFTER + gap/2, FILL - gap*2, (int) (Settings.screenHeight * 0.3));\n\n        final TabbedContainer tc = new TabbedContainer(images);\n        tc.setActiveIcon(filled);\n        tc.setType(TabbedContainer.TABS_BOTTOM);\n        tc.setBackColor(Color.DARK);\n        tc.getContainer(0).setBackColor(Colors.P_300);\n        tc.getContainer(1).setBackColor(Colors.P_400);\n        tc.getContainer(2).setBackColor(Colors.P_500);\n        tc.allSameWidth = true;\n        tc.extraTabHeight = fmH / 2;\n        tc.setBorderStyle(Container.BORDER_NONE);\n        tc.transparentBackground = true;\n        spacing.add(tc, LEFT, TOP, FILL, PARENTSIZE);\n        for(int i = 0; i < 3; i++)\n            tc.getContainer(i).add(new Label(\"Container \" + (i+1)), CENTER, CENTER);\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h3>\n    <table>\n  <thead>\n    <tr>\n      <th style={{\n            \"textAlign\": \"left\"\n          }}>Tipo</th>\n      <th style={{\n            \"textAlign\": \"left\"\n          }}>Nome</th>\n      <th style={{\n            \"textAlign\": \"left\"\n          }}>Descri&#xE7;&#xE3;o</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Construct</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>TabbedContainer(String[] strCaptions)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Uses a string array as capations for the tabs.</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Construct</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>TabbedContainer(Image[] imgCaptions, int transparentColor)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Uses an image array to represent the flaps and set a color.</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Construct</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>TabbedContainer(Image[] imgCaptions)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Uses an image array to represent the flaps</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Container</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>getContainer(int i)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Returns the Container for tab</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Void</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>setType(byte type)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>\n        <p>Sets the position of the tabs.</p>\n        <p>You can use TABS_TOP, TABS_BOTTOM, TABS_NONE</p>\n      </td>\n    </tr>\n  </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`See a example on `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/TotalCross/TCSample/blob/master/src/main/java/totalcross/sample/components/ui/TabbedContainerSample.java\"\n        }}>{`github`}</a>{` .`}</li>\n      <li parentName=\"ul\">{`See the `}<a parentName=\"li\" {...{\n          \"href\": \"https://rs.totalcross.com/doc/totalcross/ui/Grid.html\"\n        }}>{`Java Docs`}</a>{` for more information.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}