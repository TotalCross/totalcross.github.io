(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{"7IeG":function(e,t,n){e.exports=n.p+"static/alignedlabels-sample.gif.pagespeed.ce.d4badoy8p-7786da74ecbc3fe5cbd8fe8a85df4c9f.gif"},"Qai/":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return s}));var a=n("k1TG"),r=n("8o2o"),b=(n("q1tI"),n("7ljp")),l=n("hhGP"),i=(n("qKvR"),{});void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/md/components/aligned-labels-container.md"}});var o={_frontmatter:i},d=l.a;function s(e){var t=e.components,l=Object(r.a)(e,["components"]);return Object(b.b)(d,Object(a.a)({},o,l,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"aligned-labels"},"Aligned Labels"),Object(b.b)("h3",{id:"overview"},"Overview"),Object(b.b)("p",null,"Aligned Label is a Container used to align all controls to the maximum width of a set of labels."),Object(b.b)("p",null,"In Totalcross this component is called ",Object(b.b)("strong",{parentName:"p"},Object(b.b)("inlineCode",{parentName:"strong"},"AlignedLabelContainer")),"."),Object(b.b)("p",null,Object(b.b)("img",{alt:"alignedlabels",src:n("7IeG")})),Object(b.b)("h3",{id:"source-code"},"Source Code"),Object(b.b)("pre",null,Object(b.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'import totalcross.ui.AlignedLabelsContainer;\nimport totalcross.ui.Button;\nimport totalcross.ui.ComboBox;\nimport totalcross.ui.Edit;\nimport totalcross.ui.Label;\nimport totalcross.ui.ListBox;\nimport totalcross.ui.ScrollContainer;\nimport totalcross.util.UnitsConverter;\n\npublic class extends ScrollContainer {\n    private int gap = UnitsConverter.toPixels(10 + DP);\n    private boolean canInsert = true;\n    private ListBox lb;\n    private Label output;\n\n    @Override\n    public void initUI() {\n        uiAdjustmentsBasedOnFontHeightIsSupported = false;\n        setBackForeColors(0xF7F7F7, 0x000000);\n        setScrollBars(false, true);\n\n        String[] labels = { "Name", "Born date", "Telephone", "Address", "City", "Country" };\n        Edit edits[] = new Edit[5];\n        edits[0].transparentBackground = true;\n        Edit.useNativeNumericPad = true;\n\n        for (int i = 0; i < edits.length; i++) {\n            switch (i) {\n            case 1:\n                edits[i] = new Edit("99/99/9999");\n                edits[i].setMode(Edit.NORMAL, true);\n                edits[i].setValidChars(Edit.numbersSet);\n                edits[i].setKeyboard(Edit.KBD_NUMERIC);\n                break;\n            case 2:\n                edits[i] = new Edit("(99)9999-99999");\n                edits[i].setMode(Edit.NORMAL, true);\n                edits[i].setValidChars(Edit.numbersSet);\n                edits[i].setKeyboard(Edit.KBD_NUMERIC);\n                break;\n            default:\n                edits[i] = new Edit();\n            }\n        }\n\n        Label title = new Label("This is an AlignedLabelsContainer.\\nAll the content will be automatically aligned.",\n                CENTER, 0, true);\n        title.autoSplit = true;\n        add(title, LEFT + gap, TOP + gap, FILL - gap, PREFERRED);\n\n        AlignedLabelsContainer alc = new AlignedLabelsContainer();\n        alc.uiAdjustmentsBasedOnFontHeightIsSupported = false;\n        alc.labelAlign = RIGHT;\n\n        alc.setInsets(gap, gap, 0, 0);\n        alc.setLabels(labels, edits[0].getPreferredHeight());\n        add(alc, LEFT, AFTER, FILL, PREFERRED);\n        int i;\n        for (i = 0; i < edits.length - 1; i++) {\n            alc.add(edits[i], LEFT + gap, alc.getLineY(i), FILL - gap, PREFERRED);\n        }\n\n        Button btnInsert = new Button("Insert data", (byte) 0);\n        btnInsert.setBackForeColors(0x4583d4, 0xFFFFFF);\n        alc.add(edits[edits.length - 1], LEFT + gap, alc.getLineY(i), edits[3].getWidth() / 2 - gap / 2, PREFERRED);\n        alc.add(btnInsert, RIGHT - gap, CENTER_OF, SAME, PREFERRED, edits[edits.length - 1]);\n\n        ComboBox cbCountry = new ComboBox(new String[] { "Brazil", "USA" });\n        alc.add(cbCountry, LEFT + gap, alc.getLineY(++i), SAME, PREFERRED, edits[edits.length - 1]);\n\n        Button btnClear = new Button("CLEAR DATA", (byte) 0);\n        alc.add(btnClear, RIGHT - gap, CENTER_OF, SAME, PREFERRED);\n\n        btnInsert.addPressListener(e -> {\n            if (canInsert) {\n                lb = new ListBox();\n                for (int j = 0; j < edits.length; j++)\n                    lb.add(labels[j] + ": " + edits[j].getText());\n                if (cbCountry.getSelectedIndex() != -1)\n                    lb.add("Country: " + cbCountry.getSelectedItem());\n                else\n                    lb.add("Country: ");\n\n                output = new Label("OUTPUT:");\n                output.setFont(font.asBold());\n                add(output, CENTER, AFTER);\n                add(lb, CENTER, AFTER + gap, SCREENSIZE + 80, PREFERRED);\n                canInsert = false;\n\n                scrollToControl(lb);\n            } else {\n                lb.removeAll();\n                for (int j = 0; j < edits.length; j++)\n                    lb.add(labels[j] + ": " + edits[j].getText());\n                if (cbCountry.getSelectedIndex() != -1)\n                    lb.add("Country: " + cbCountry.getSelectedItem());\n                else\n                    lb.add("Country: ");\n            }\n            // reposition(); reposition bugando o edit\n        });\n\n        btnClear.addPressListener(e -> {\n\n            // Cleaning the labels\' content\n            for (Edit edit : edits)\n                edit.clear();\n            cbCountry.setSelectedIndex(-1);\n            if (!canInsert) {\n                // Cleaning the output\n                remove(lb);\n                remove(output);\n                canInsert = true;\n            }\n        });\n    }\n}\n')),Object(b.b)("h3",{id:"attributes"},"Attributes"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Type"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Name"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("strong",{parentName:"td"},"Font")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"childrenFont"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Set this member to the font you want to set to the controls that are added to this container")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("strong",{parentName:"td"},"int","["," ","]")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"foreColors"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Sets an array with the same number of labels and the colors you want to show for each label")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("strong",{parentName:"td"},"int")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"labelAlign"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"The alignment of the labels")))),Object(b.b)("h3",{id:"methods"},"Methods"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"ype"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Name"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("strong",{parentName:"td"},"Construtor")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"AlignedLabelsContainer","("," ",")"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Creates a new AlignedLabelsContainer without labels")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("strong",{parentName:"td"},"Construtor")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"AlignedLabelsContainer","(","String","[","]"," labels",")"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Creates a new AlignedLabelsContainer with the given labels")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("strong",{parentName:"td"},"Construtor")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"AlignedLabelsContainer","(","String","[","]"," labels, int vgap",")"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Creates a new AlignedLabelsContainer with the given labels and a vertical gap between the labels")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("strong",{parentName:"td"},"void")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"add","(","Control c",")"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Since this is an AlignedLabelsContainer, use this to add a label")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("strong",{parentName:"td"},"int")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"getLineY","(","int line",")"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Given a line ","(","staring from 0",")",", returns the y position")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("strong",{parentName:"td"},"void")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"setLabels","(","String","["," ","]"," labels, int vgap",")"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Sets the labels and the extra gap between rows ","(","which may be 0",")")))),Object(b.b)("h3",{id:""}))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/md/components/aligned-labels-container.md"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-md-components-aligned-labels-container-md-23043f229c9945a7c270.js.map